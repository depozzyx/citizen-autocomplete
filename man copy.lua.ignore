

---
---No description (
---
---
---@param name string
---@return nil
function SetLocalPlayerVoice(name) end

---
---No description (
---
---
---@param name string
---@return nil
function SetLocalPlayerPainVoice(name) end

---
---No description (
---
---
---@param name string
---@return nil
function SetPlayerPainRootBankName(name) end

---
---No description (
---
---
---@return nil
function ThisScriptShouldBeSaved() end

---
---No description (
---
---
---@return nil
function ThisScriptIsSafeForNetworkGame() end

---
---No description (
---
---
---@param allow boolean
---@return nil
function SetThisScriptCanRemoveBlipsCreatedByAnyScript(allow) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unkf number (float)
---@param name any (char*)
---@param unku number (positive integer)
---@return number (positive integer)
function RegisterSaveHouse(x, y, z, unkf, name, unku) end

---
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param savehouse number (positive integer) house
---@param enable boolean enable
---@return nil
function EnableSaveHouse(savehouse, enable) end

---
---No description (
---
---
---@param scriptName string scriptname (Dont include the extension)
---@return nil
function RequestScript(scriptName) end

---
---No description (
---
---
---@param scriptName string scriptname (Dont include the extension)
---@param stacksize number (positive integer) unknown (suggested 1024)
---@return number (positive integer)
function StartNewScript(scriptName, stacksize) end

---
---This function sets the max stars you can get for your wanted level. It will not clear your current wanted level.
---
---
---@param lvl number (positive integer) wanted level (0=No wanted level / 1 - 6=Max number of stars)
---@return nil
function SetMaxWantedLevel(lvl) end

---
---No description (
---
---
---@param density number (float)
---@return nil
function SetCarDensityMultiplier(density) end

---
---No description (
---
---
---@param density number (float)
---@return nil
function SetRandomCarDensityMultiplier(density) end

---
---Adjust the ped density like 03DE in vc
---
---
---@param density number (float) Ped density
---@return nil
function SetPedDensityMultiplier(density) end

---
---No description (
---
---
---@param density number (float)
---@param densitynext number (float)
---@return nil
function SetScenarioPedDensityMultiplier(density, densitynext) end

---
---No description (
---
---
---@param ped number (Ped)
---@param stopspeaking boolean
---@return nil
function StopPedSpeaking(ped, stopspeaking) end

---
---This function sets ped animation group, which can be used, for example, to change walking style.
---
---
---@param ped number (Ped) Ped handler
---@param grname string Anim set
---@return nil
function SetAnimGroupForChar(ped, grname) end

---
---This native function does nothing. GTA 4 has several native functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could be more than 0.
---
---
---@param ped number (Ped)
---@param allow boolean
---@return nil
function SetCharDiesInstantlyInWater(ped, allow) end

---
---No description (
---
---
---@return number (Cam) rootcam
function GetRootCam() end

---
---No description (
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@return boolean
---@return number (float) pheight variable to store water height
function GetWaterHeight(x, y, z) end

---
---No description (
---
---
---@param ped number (Ped)
---@param set boolean
---@return nil
function SetPedForceVisualiseHeadDamageFromBullets(ped, set) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return nil
function PanicScream(ped) end

---
---The results of this function are either unknown or untested.
---
---
---@param ped number (Ped) Ped Handle
---@param set boolean On / Offï¿½?
---@return nil
function SetCharBleeding(ped, set) end

---
---No description (
---
---
---@param ped number (Ped)
---@param set boolean
---@return nil
function SetCharReadyToBeStunned(ped, set) end

---
---Enables or disables collision detection for the specified ped.
---
---
---@param ped number (Ped) Ped handle
---@param set boolean Enable collision detection
---@return nil
function SetCharCollision(ped, set) end

---
---No description (
---
---
---@param ped number (Ped)
---@param set boolean
---@return nil
function SetPedSkipsComplexCoverCollisionChecks(ped, set) end

---
---Blocks a Character from cowering in cover.
---
---
---@param ped number (Ped) Char Id
---@param set boolean True or false depending on whether the Character cowering in cover should be blocked
---@return nil
function BlockCoweringInCover(ped, set) end

---
---Blocks a Character from Peeking in cover.
---
---
---@param ped number (Ped) Char Id
---@param set boolean True or false depending on whether the Character is to be blocked from peeking in cover
---@return nil
function BlockPeekingInCover(ped, set) end

---
---No description (
---
---
---@param ped number (Ped)
---@param set boolean
---@return nil
function SetCharMovementAnimsBlocked(ped, set) end

---
---No description (
---
---
---@param ped number (Ped)
---@param set boolean
---@return nil
function SetPedGeneratesDeadBodyEvents(ped, set) end

---
---Set the specified camera to the 'drunken' mode.
---
---
---@param cam number (Cam) the camera to affect
---@param val number (float) amount of drunken-ness
---@param time number (integer) amount of time for the camera to be drunken (in ms)
---@return nil
function SetDrunkCam(cam, val, time) end

---
---This function will warp the character in P1 to the coordinates in x,y, and z. Similar to SET\_CHAR\_COORDINATES but the character's torso is the point where the character will be placed by.
---
---
---@param ped number (Ped) char handle
---@param x number (float) X pos
---@param y number (float) Y pos
---@param z number (float) Z pos
---@return nil
function SetCharCoordinatesNoOffset(ped, x, y, z) end

---
---This function sets the speed the char will shoot. Appears to be from 0 to 100 (100 appears to be a very high rate of fire).
---
---
---@param ped number (Ped) Char Handle
---@param rate number (integer) Fire Rate
---@return nil
function SetCharShootRate(ped, rate) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetSuppressHeadlightSwitch(set) end

---
---This native function does nothing. GTA 4 has several native functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could be more than 0.
---
---
---@param set boolean
---@return nil
function SetPlayerInvisibleToAi(set) end

---
---No description (
---
---
---@param ped number (Ped)
---@param name string
---@param r number (integer)
---@param g number (integer)
---@param b number (integer)
---@param a number (integer)
---@return nil
function GivePedFakeNetworkName(ped, name, r, g, b, a) end

---
---No description (
---
---
---@param obj number (Object)
---@param unknown0 boolean
---@param fallingDamage boolean
---@param unknown1 boolean
---@param unknown2 boolean
---@param unknown3 boolean
---@return nil
function SetObjectProofs(obj, unknown0, fallingDamage, unknown1, unknown2, unknown3) end

---
---No description (
---
---
---@param obj number (Object)
---@param set boolean
---@return nil
function SetObjectDynamic(obj, set) end

---
---No description (
---
---
---@param obj number (Object)
---@param set boolean
---@return nil
function SetObjectInvincible(obj, set) end

---
---No description (
---
---
---@param obj number (Object) Object handle.
---@param set boolean true/false
---@return nil
function FreezeObjectPosition(obj, set) end

---
---No description (
---
---
---@param shooter number (Ped)
---@param victim number (Ped)
---@param time number (integer)
---@param shootmode number (ShootMode)
---@return nil
function TaskShootAtChar(shooter, victim, time, shootmode) end

---
---No description (
---
---
---@param ped number (Ped)
---@param value boolean
---@return nil
function SetPedDontDoEvasiveDives(ped, value) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@param multiplier number (float) Speed multiplier
---@return nil
function SetCharMoveAnimSpeedMultiplier(ped, multiplier) end

---
---This function can replace the character's speech with another character's speech. Other voices like grunts and pains will not be replaced. The majority of available character speeches can be found in the speech.rpf file.
---
---
---@param ped number (Ped) char handle
---@param name string audio name
---@return nil
function SetAmbientVoiceName(ped, name) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function CancelCurrentlyPlayingAmbientSpeech(ped) end

---
---This function stops an execution of the script for the specified amount of time, similar to opcode 0001 from the GTA III series.
---
---
---@param timeMS number (integer) milliseconds
---@return nil
function Wait(timeMS) end

---
---Adds/subtracts money from the specified player.
---
---
---@param playerIndex number (Player) Player Index
---@param score number (integer) Money Amount
---@return nil
function AddScore(playerIndex, score) end

---
---Allows the player to pickup small random litter. If set to 0, the player can't pick up objects. Objects already in Niko's hand will still be held on.
---
---
---@param playerIndex number (Player) Player index
---@param allow boolean true (1)/false (0)
---@return nil
function AllowPlayerToCarryNonMissionObjects(playerIndex, allow) end

---
---Alters the player's wanted level. Sometimes the wanted level doesn't change immediately. Include APPLY\_WANTED\_LEVEL\_CHANGE\_NOW to immediately change the wanted level.
---
---
---@param playerIndex number (Player) Player index
---@param level number (positive integer) Wanted Level
---@return nil
function AlterWantedLevel(playerIndex, level) end

---
---Increments a players wanted level.
---
---
---@param playerIndex number (Player) Player index
---@param level number (positive integer) Wanted Level to increment
---@return nil
function AlterWantedLevelNoDrop(playerIndex, level) end

---
---Applies the wanted level changes immediately.
---
---
---@param playerIndex number (Player) Player Id
---@return nil
function ApplyWantedLevelChangeNow(playerIndex) end

---
---Changes the Players Model
---
---
---@param playerIndex number (Player) player index
---@param model number (positive integer) model hash
---@return nil
function ChangePlayerModel(playerIndex, model) end

---
---Clears the last ped damaged for the specific Player
---
---
---@param playerIndex number (Player) Player index
---@return nil
function ClearPlayerHasDamagedAtLeastOnePed(playerIndex) end

---
---Returns the Player Index from the Player ID. Use GET\_PLAYER\_ID to get the current player's ID.
---
---
---@param playerId number (positive integer) Player ID
---@return number (integer) Player ID for the Player Index
function ConvertIntToPlayerindex(playerId) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return nil
function ClearWantedLevel(playerIndex) end

---
---Creates a Player
---
---
---@param playerId number (positive integer) Model Hash
---@param x number (float) X Position
---@param y number (float) Y Position
---@param z number (float) Z Position
---@return number (Player) pPlayerIndex Variable to store the Player Id in
function CreatePlayer(playerId, x, y, z) end

---
---Sets if the player can lock on. Untested
---
---
---@param playerIndex number (Player) Player index
---@param disabled boolean true/false
---@return nil
function DisablePlayerLockon(playerIndex, disabled) end

---
---Sets if the player can sprint or not. Untested
---
---
---@param playerIndex number (Player) Player index
---@param disabled boolean true/false
---@return nil
function DisablePlayerSprint(playerIndex, disabled) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return number (Ped) pPed Variable to store player char.
function GetPlayerChar(playerIndex) end

---
---This function returns the pointer for the group the player is in.
---
---
---@param playerIndex number (Player) player index
---@return number (Group) pGroup variable to store number group pointer
function GetPlayerGroup(playerIndex) end

---
---Returns the Current Player's ID. The Player ID is meaningless for other script functions and should be converted to a Player Index before its used by calling CONVERT\_INT\_TO\_PLAYERINDEX.
---
---
---@return number (positive integer) Current Player's ID
function GetPlayerId() end

---
---No description (
---
---
---@param pVehicle any (Vehicle*)
---@return nil
function GetPlayersLastCarNoSave(pVehicle) end

---
---No description (
---
---
---@param playerIndex number (Player)
---@return number (positive integer) pMaxArmour
function GetPlayerMaxArmour(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return string
function GetPlayerName(playerIndex) end

---
---No description (
---
---
---@return number (positive integer)
function GetPlayersettingsModelChoice() end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return any
function GetPlayerToPlaceBombInCar(vehicle) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return number (positive integer) Returns the time since the player drove against traffic.
function GetTimeSincePlayerDroveAgainstTraffic(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return number (positive integer) Returns the time since the player drove on the pavement.
function GetTimeSincePlayerDroveOnPavement(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return number (positive integer) Returns the time since the player hit a building.
function GetTimeSincePlayerHitBuilding(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return number (positive integer) Returns the time since the player hit a car.
function GetTimeSincePlayerHitCar(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return number (positive integer) Returns the time since the player hit an object.
function GetTimeSincePlayerHitObject(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return number (positive integer) Returns the time since the player hit a pedestrian with a vehicle.
function GetTimeSincePlayerHitPed(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return number (positive integer) Returns the time since the player ran a red light.
function GetTimeSincePlayerRanLight(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player)
---@param pikcup number (Pickup)
---@return boolean
function HasPlayerCollectedPickup(playerIndex, pikcup) end

---
---This function returns true if the player has damaged at least one ped.
---
---
---@param playerIndex number (Player) Player index
---@return boolean
function HasPlayerDamagedAtLeastOnePed(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player)
---@return boolean
function HasPlayerDamagedAtLeastOneVehicle(playerIndex) end

---
---This function returns true if the player is climbing.
---
---
---@param playerIndex number (Player) Player index
---@return boolean
function IsPlayerClimbing(playerIndex) end

---
---Returns a boolean indicating if the specified player is controllable.
---
---
---@param playerIndex number (Player) player index
---@return boolean true if player is controllable
function IsPlayerControlOn(playerIndex) end

---
---This function returns true if the player is dead.
---
---
---@param playerIndex number (Player) Player index
---@return boolean
function IsPlayerDead(playerIndex) end

---
---This function returns true if the character is aiming at the specified ped/character.
---
---
---@param playerIndex number (Player) Player index
---@param ped number (Ped) Ped handle.
---@return boolean
function IsPlayerFreeAimingAtChar(playerIndex, ped) end

---
---This function returns true if the player is free for ambient tasks.
---
---
---@param playerIndex number (Player) Player index
---@return boolean
function IsPlayerFreeForAmbientTask(playerIndex) end

---
---This function returns .
---
---
---@param playerIndex number (Player) Player index
---@return boolean
function IsPlayerPlaying(playerIndex) end

---
---Returns a boolean indicating if the specified player is pressing the cars horn.
---
---
---@param playerIndex number (Player) player index
---@return boolean true if player is pressing the horn
function IsPlayerPressingHorn(playerIndex) end

---
---This function returns true only when player lock on target.
---
---
---@param playerIndex number (Player) Player ID
---@return boolean
function IsPlayerTargettingAnything(playerIndex) end

---
---This function returns true if the player is targetting a character.
---
---
---@param playerIndex number (Player) Player index
---@param ped number (Ped)
---@return boolean
function IsPlayerTargettingChar(playerIndex, ped) end

---
---No description (
---
---
---@param playerIndex number (Player)
---@param obj number (Object)
---@return boolean
function IsPlayerTargettingObject(playerIndex, obj) end

---
---This function returns true if the players score is greater than the specified score.
---
---
---@param playerIndex number (Player) Player index
---@param score number (positive integer) Score
---@return boolean
function IsScoreGreater(playerIndex, score) end

---
---This native function returns true if the player's wanted level is greater than the integer value you put in as the second parameter.
---
---
---@param playerIndex number (Player) player index
---@param level number (positive integer) value to compare wanted level with
---@return boolean true if wanted level is greater than the 2nd parameter
function IsWantedLevelGreater(playerIndex, level) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return boolean
function PlayerHasChar(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return boolean
function PlayerHasFlashingStarsAboutToDrop(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return boolean
function PlayerHasGreyedOutStars(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param x number (float) X-Coordinates
---@param y number (float) Y-Coordinates
---@param z number (float) Z-Coordinates
---@return nil
function RegisterPlayerRespawnCoords(playerIndex, x, y, z) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetEveryoneIgnorePlayer(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetPlayerCanBeHassledByGangs(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetPlayerCanDoDriveBy(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetPlayerCanUseCover(playerIndex, value) end

---
---Toggle if the specified player is controllable.
---
---
---@param playerIndex number (Player) player index
---@param value boolean on/off
---@return nil
function SetPlayerControl(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player)
---@param unknown1 boolean
---@param unknown2 boolean
---@param unknown3 boolean
---@return nil
function SetPlayerControlAdvanced(playerIndex, unknown1, unknown2, unknown3) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetPlayerFastReload(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetPlayerGroupToFollowAlways(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetPlayerInvincible(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return nil
function SetPlayerMoodNormal(playerIndex) end

---
---No description (
---
---
---@param playerIndex number (Player)
---@param unknown150 number (positive integer)
---@return nil
function SetPlayerMoodPissedOff(playerIndex, unknown150) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetPlayerNeverGetsTired(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@return nil
function SetPlayersettingsModelVariationsChoice(playerIndex) end

---
---This function forces the police to ignore the player even when its wanted level is greater than 0.
---
---
---@param playerIndex number (Player) Player index
---@param value boolean true/false
---@return nil
function SetPoliceIgnorePlayer(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value any (uint*, boolean true/false
---@return nil
function StoreScore(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player) Player index
---@param value any (uint*, boolean true/false
---@return nil
function StoreWantedLevel(playerIndex, value) end

---
---No description (
---
---
---@param playerIndex number (Player)
---@param remove boolean
---@return nil
function RemovePlayerHelmet(playerIndex, remove) end

---
---No description (
---
---
---@param ped number (Ped) Pointer to Char
---@param weapon number (positive integer) Weapon Index
---@param amount number (positive integer) Ammo Amount
---@return nil
function AddAmmoToChar(ped, weapon, amount) end

---
---No description (
---
---
---@param ped number (Ped) Pointer to Char
---@param amount number (positive integer) Armour Amount
---@return nil
function AddArmourToChar(ped, amount) end

---
---Applies force to an ped. P6, P7 and P8 does not seem to work in animated or ragdolled state.
---P10 IsForceDirectionReletive specifies if the force direction is relative to direction object is facing (true), or static world direction (false).
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param ped number (Ped) Ped Id
---@param unknown0_3 number (positive integer) Unknown, suggested: true
---@param x number (float) X Force
---@param y number (float) Y Force
---@param z number (float) Z Force
---@param spinX number (float) X Angle
---@param spinY number (float) Y Angle
---@param spinZ number (float) Z Angle
---@param unknown4_0 number (positive integer) Unknown, suggested: true
---@param unknown5_1 number (positive integer) IsForceDirectionReletive
---@param unknown6_1 number (positive integer) Unknown, suggested: true
---@param unknown7_1 number (positive integer) Unknown, suggested: true
---@return nil
function ApplyForceToPed(ped, unknown0_3, x, y, z, spinX, spinY, spinZ, unknown4_0, unknown5_1, unknown6_1, unknown7_1) end

---
---Attaches a ped to a vehicle.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param ped number (Ped) Ped Id
---@param vehicle number (Vehicle) Vehicle Id
---@param unknown0_0 number (positive integer) Unknown (always false)
---@param offsetX number (float) X Offset
---@param offsetY number (float) Y Offset
---@param offsetZ number (float) Z Offset
---@param rotX number (float) Rotation X
---@param rotY number (float) Rotation Y
---@param unknown_1 boolean
---@param unknown_2 boolean
---@return nil
function AttachPedToCar(ped, vehicle, unknown0_0, offsetX, offsetY, offsetZ, rotX, rotY, unknown_1, unknown_2) end

---
---Blocks a characters gesture animations.
---
---
---@param ped number (Ped) Char Id
---@param value boolean True or false depending on whether the Character's Gesture Animations are to be blocked
---@return nil
function BlockCharGestureAnims(ped, value) end

---
---Blocks a ped from weapon switching.
---
---
---@param ped number (Ped) Ped Id
---@param value boolean True or false depending on whether the Ped is having weapon switching blocked
---@return nil
function BlockPedWeaponSwitching(ped, value) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function CancelCurrentlyPlayingAmbientSpeech(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped Hanlde
---@return nil
function ClearAllCharProps(ped) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function ClearCharLastDamageBone(ped) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function ClearCharLastDamageEntity(ped) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function ClearCharLastWeaponDamage(ped) end

---
---The results of this function are either unknown or untested.
---
---
---@param ped number (Ped) Ped Hanlde
---@param unknown boolean Unknwon (prop idï¿½?)
---@return nil
function ClearCharProp(ped, unknown) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function ClearCharSecondaryTask(ped) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function ClearCharTasks(ped) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function ClearCharTasksImmediately(ped) end

---
---No description (
---
---
---@param ped number (Ped) Player char.
---@return nil
function ClearRoomForChar(ped) end

---
---No description (
---
---
---@param type number (RelationshipGroup) pedtype
---@param model number (positive integer) ped model hash
---@param x number (float) X pos
---@param y number (float) Y pos
---@param z number (float) Z pos
---@param unknownTrue boolean unknown (always 1?)
---@return number (Ped) pPed variable to store ped handle
function CreateChar(type, model, x, y, z, unknownTrue) end

---
---No description (
---
---
---@param x number (float) X-Coordinate.
---@param y number (float) Y-Coordinate.
---@param z number (float) Z-Coordinate.
---@return number (Ped) pPed Variable to store ped.
function CreateRandomChar(x, y, z) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (Ped) pPed variable to store ped
function CreateRandomCharAsDriver(vehicle) end

---
---No description (
---
---
---@param x number (float) X-Coordinate.
---@param y number (float) Y-Coordinate.
---@param z number (float) Z-Coordinate.
---@return number (Ped) pPed Variable to store female ped.
function CreateRandomFemaleChar(x, y, z) end

---
---No description (
---
---
---@param x number (float) X-Coordinate.
---@param y number (float) Y-Coordinate.
---@param z number (float) Z-Coordinate.
---@return number (Ped) pPed Variable to store male ped.
function CreateRandomMaleChar(x, y, z) end

---
---Subtracts hit\_points from the health of a ped.
---
---
---
---@param ped number (Ped) Ped Handle
---@param hitPoints number (positive integer) hit_points
---@param unknown boolean unknown
---@return nil
function DamageChar(ped, hitPoints, unknown) end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param part number (positive integer) body part
---@param hitPoints number (positive integer) hit points
---@return nil
function DamagePedBodyPart(ped, part, hitPoints) end

---
---No description (
---
---
---@return number (Ped) pPed Ped handle.
function DeleteChar() end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param unknown boolean
---@return nil
function DetachPed(ped, unknown) end

---
---No description (
---
---
---@param ped number (Ped)
---@param unknown boolean
---@return nil
function DetachPedFromWithinCar(ped, unknown) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle.
---@return boolean
function DoesCharExist(ped) end

---
---If the specified ped is holding an object, he will drop it.
---
---
---@param ped number (Ped) ped handle
---@param unknownTrue boolean unknown (true suggested)
---@return nil
function DropObject(ped, unknownTrue) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return nil
function ExplodeCharHead(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return nil
function ExtinguishCharFire(ped) end

---
---No description (
---
---
---@param ped number (Ped) target ped
---@param x number (float) targetcoord x
---@param y number (float) targetcoord y
---@param z number (float) targetcoord z
---@return nil
function FirePedWeapon(ped, x, y, z) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return nil
function ForceCharToDropWeapon(ped) end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param force boolean force
---@param timerMaybe number (positive integer) timer (?)
---@return nil
function ForcePedPinnedDown(ped, force, timerMaybe) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle.
---@param vehicle number (Vehicle) Vehicle hash.
---@return nil
function ForcePedToFleeWhilstDrivingVehicle(ped, vehicle) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param frozen boolean true/false
---@return nil
function FreezeCharPosition(ped, frozen) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param frozen boolean true/false
---@return nil
function FreezeCharPositionAndDontLoadCollision(ped, frozen) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param weapon number (positive integer) Weapon handle.
---@return number (positive integer) pAmmo Variable to store the weapons ammo.
function GetAmmoInCharWeapon(ped, weapon) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param weapon number (positive integer) Weapon handle.
---@return boolean
---@return number (positive integer) pAmmo Variable to store the clips ammo ammount.
function GetAmmoInClip(ped, weapon) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return string
function GetAnimGroupFromChar(ped) end

---
---This function will get the x,y,z coordinates of the character in P1, and store them to variables.
---
---
---@param ped number (Ped) char handle
---@return number (float) pX variable to store X pos
---@return number (float) pY variable to store Y pos
---@return number (float) pZ variable to store Z pos
function GetCharCoordinates(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return number (positive integer) pHealth Variable to store the characters health.
function GetCharHealth(ped) end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param animGroup string variable to store animation group
---@param animName string variable to store animation name
---@return number (float) pValue variable to store time
function GetCharAnimCurrentTime(ped, animGroup, animName) end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param animGroup string variable to store animation group
---@param animName string variable to store animation name
---@return number (float) pValue variable to store total time
function GetCharAnimTotalTime(ped, animGroup, animName) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return number (positive integer) pArmour Variable to store the characters armour.
function GetCharArmour(ped) end

---
---Component handle:
---
---
---@param ped number (Ped) Char handle
---@param component number (positive integer) Char component handle
---@return number (positive integer) Returns the handle for the variation of the specified char component.
function GetCharDrawableVariation(ped, component) end

---
---No description (
---
---
---@param ped number (Ped)
---@param unknown boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
function GetCharExtractedDisplacement(ped, unknown) end

---
---Gets the character's heading in degrees.
---
---
---@param ped number (Ped) char handle
---@return number (float) pValue variable to store char heading
function GetCharHeading(ped) end

---
---This function will calculate the Z distance between the specified char and the ground, and return that distance.
---
---
---@param ped number (Ped) ped handle
---@return number (float) pValue
function GetCharHeightAboveGround(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return any
---@return number (positive integer) pBone Variable to store the last damaged Bone ID.
function GetCharLastDamageBone(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function GetCharMeleeActionFlag0(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function GetCharMeleeActionFlag1(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return number (positive integer) pModel Variable to store the characters model.
function GetCharModel(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return number (positive integer)
function GetCharMoney(ped) end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param unknown boolean hats or glasses
---@return number (positive integer) pIndex variable to store prop index
function GetCharPropIndex(ped, unknown) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function GetCharReadyToBeExecuted(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function GetCharReadyToBeStunned(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return number (float) pValue Variable to store the characters speed.
function GetCharSpeed(ped) end

---
---Component handle:
---
---
---@param ped number (Ped) Char handle
---@param component number (positive integer) Char component handle
---@return number (positive integer) Returns the handle for the texture variation of the specified char component.
function GetCharTextureVariation(ped, component) end

---
---Gets x, y and z velocities of the char.
---
---
---@param ped number (Ped) char handle
---@return number (float) pX variable to store X Velocity
---@return number (float) pY variable to store Y Velocity
---@return number (float) pZ variable to store Z Velocity
function GetCharVelocity(ped) end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param slot number (positive integer) slot
---@return number (positive integer) pWeapon variable to store weapon
---@return number (positive integer) pAmmo0 variable to store ammo (1) (unknown if clip or not)
---@return number (positive integer) pAmmo1 variable to store ammo (2) (unknown if clip or not)
function GetCharWeaponInSlot(ped, slot) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function GetCharWillCowerInsteadOfFleeing(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
---@return number (positive integer) pWeapon Variable to store the characters current weapon.
function GetCurrentCharWeapon(ped) end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param part number (positive integer) part
---@return number (positive integer) damage
function GetDamageToPedBodyPart(ped, part) end

---
---This function will get the x,y,z coordinates of the character in P1, and store them to variables.
---
---
---@param ped number (Ped) char handle
---@return number (float) pX variable to store X pos
---@return number (float) pY variable to store Y pos
---@return number (float) pZ variable to store Z pos
function GetDeadCharCoordinates(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
function GetDeadCharPickupCoords(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@return number (positive integer) pKey
function GetKeyForCharInRoom(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@param weapon number (positive integer) Weapon handle.
---@return boolean
---@return number (positive integer) pMaxAmmo Variable to store maximum ammo.
function GetMaxAmmo(ped, weapon) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@param weapon number (positive integer) Weapon handle.
---@return number (positive integer) pMaxAmmo Variable to store max ammo in the current clip.
function GetMaxAmmoInClip(ped, weapon) end

---
---Get the number of available drawable variations on component (parameter 2).
---
---Components (parameter 2):
---
---
---@param ped number (Ped) Ped
---@param component number (positive integer) Component
---@return number (positive integer)
function GetNumberOfCharDrawableVariations(ped, component) end

---
---Gets all available texture variations in current component (parameter 2) and for current drawable variation (parameter 3).
---Example usage:
---int CurrentHead = GET\_CHAR\_DRAWABLE\_VARIATION(GetPlayerPed(), 0); int MaxHeadTex = GET\_NUMBER\_OF\_CHAR\_TEXTURE\_VARIATIONS(GetPlayerPed(), 0, CurrentHead);
---
---
---@param ped number (Ped) Ped
---@param component number (positive integer) Component id
---@param unknown1 number (positive integer) Variaton
---@return number (positive integer)
function GetNumberOfCharTextureVariations(ped, component, unknown1) end

---
---Returns the object the specified ped is holding
---
---
---@param ped number (Ped) ped handle
---@return number (integer) object handle
function GetObjectPedIsHolding(ped) end

---
---This function will get the x,y,z coordinates of the character in P1, with the offsets in P2 P3 and P4, and store them to variables.
---
---
---@param ped number (Ped) char handle
---@param x number (float) offset X value
---@param y number (float) offset Y value
---@param z number (float) offset Z value
---@return number (float) pOffX variable to store X pos
---@return number (float) pOffY variable to store Y pos
---@return number (float) pOffZ variable to store Z pos
function GetOffsetFromCharInWorldCoords(ped, x, y, z) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return number (positive integer)
function GetPedClimbState(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle.
---@param bone number (positive integer) Bone ID
---@param x number (float) unknown(Offset X?)
---@param y number (float) unknown(Offset Y?)
---@param z number (float) unknown(Offset Z?)
---@return any (Vector3, pointer pPosition variable to store bone position
function GetPedBonePosition(ped, bone, x, y, z) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@param pIndex any (uint*, number (integer Variable to store characters group index.
---@return nil
function GetPedGroupIndex(ped, pIndex) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return number (positive integer) pType Variable to store ped type.
function GetPedType(ped) end

---
---Gives a helmet to the specified ped.
---
---
---@param ped number (Ped) ped id
---@return nil
function GivePedHelmet(ped) end

---
---No description (
---
---
---@param ped number (Ped) char handle
---@param weapon number (positive integer) weapon
---@param ammo number (positive integer) ammo amount
---@param unknown0 boolean 0=hidden/1=show
---@return nil
function GiveWeaponToChar(ped, weapon, ammo, unknown0) end

---
---This function returns true if the character has been damaged by the specified vehicle.
---
---
---@param ped number (Ped) Char handle.
---@param vehicle number (Vehicle) Vehicle handle.
---@return boolean
function HasCharBeenDamagedByCar(ped, vehicle) end

---
---No description (
---
---
---@param ped number (Ped) char handle
---@param otherChar number (Ped) other char handle
---@param unknownFalse boolean
---@return boolean Has been damaged by char
function HasCharBeenDamagedByChar(ped, otherChar, unknownFalse) end

---
---This function returns true if the character has been damaged by the specified weapon.
---
---
---@param ped number (Ped) Char handle.
---@param weapon number (positive integer) Weapon handle.
---@return boolean
function HasCharBeenDamagedByWeapon(ped, weapon) end

---
---This function returns true if the character has the specified weapon.
---
---
---@param ped number (Ped) Char handle.
---@param weapon number (positive integer) Weapon handle.
---@return boolean
function HasCharGotWeapon(ped, weapon) end

---
---Note: This ignores many things, such as vehicles, peds, dumpsters, low walls, and vegetation.
---
---
---@param ped number (Ped) 1st char handle
---@param otherChar number (Ped) 2nd char handle
---@return boolean
function HasCharSpottedChar(ped, otherChar) end

---
---Note: This ignores many things, such as vehicles, peds, dumpsters, low walls, and vegetation.
---
---
---@param ped number (Ped) 1st char handle
---@param otherChar number (Ped) 2nd char handle
---@return boolean
function HasCharSpottedCharInFront(ped, otherChar) end

---
---The results of this function are either unknown or untested.
---
---
---@param ped number (Ped) Ped Handle
---@return boolean Unknown
function IsAmbientSpeechPlaying(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@param slot number (positive integer) Slot
---@return boolean
function IsCharArmed(ped, slot) end

---
---This function checks if the specified char is dead or not.
---
---
---@param ped number (Ped) ped handle
---@return boolean true if dead, false if alive
function IsCharDead(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsCharDucking(ped) end

---
---No description (
---
---
---@param ped number (Ped) First char
---@param otherChar number (Ped) Other char
---@param angle number (float) Angle
---@return boolean Whether the first char is facing the other char
function IsCharFacingChar(ped, otherChar, angle) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharFatallyInjured(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharGesturing(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharGettingInToACar(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharGettingUp(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@param health number (positive integer) Health
---@return boolean
function IsCharHealthGreater(ped, health) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInAir(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x1 number (float)
---@param y1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param unknown number (float)
---@param unknownFalse boolean
---@return boolean
function IsCharInAngledArea2d(ped, x1, y1, x2, y2, unknown, unknownFalse) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param z2 number (float)
---@param unknown number (float)
---@param unknownFalse boolean
---@return boolean
function IsCharInAngledArea3d(ped, x1, y1, z1, x2, y2, z2, unknown, unknownFalse) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInAnyBoat(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInAnyCar(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInAnyHeli(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInAnyPlane(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean Returns true if the given vehicle is a police vehicle (includes cars, trucks, helicopters, and boats).
function IsCharInAnyPoliceVehicle(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInAnyTrain(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x1 number (float)
---@param y1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param unknownFalse boolean
---@return boolean
function IsCharInArea2d(ped, x1, y1, x2, y2, unknownFalse) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param z2 number (float)
---@param unknownFalse boolean
---@return boolean
function IsCharInArea3d(ped, x1, y1, z1, x2, y2, z2, unknownFalse) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x1 number (float)
---@param y1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param unknownFalse boolean
---@return boolean
function IsCharInAreaOnFoot2d(ped, x1, y1, x2, y2, unknownFalse) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@param vehicle number (Vehicle) Car handle
---@return boolean
function IsCharInCar(ped, vehicle) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInFlyingVehicle(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInMeleeCombat(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param model number (positive integer)
---@return boolean
function IsCharInModel(ped, model) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInTaxi(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInWater(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharInjured(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharMale(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param model number (positive integer)
---@return boolean
function IsCharModel(ped, model) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean Returns true if the character's vehicle is a bike.
function IsCharOnAnyBike(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharOnFire(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharOnFoot(ped) end

---
---This native is kinda misleading, I find it returns true if they're in your angle, there can be a building between the both of you and if you're looking in their general direction this is gonna return true.
-----IIV NATHAN VII (talk) 15:09, 20 December 2014 (UTC)
---
---
---@param ped number (Ped) Char handle
---@return boolean true/false
function IsCharOnScreen(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param animSet string
---@param animName string
---@return boolean
function IsCharPlayingAnim(ped, animSet, animName) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharShooting(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x1 number (float)
---@param y1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param unknownFalse boolean
---@return boolean
function IsCharShootingInArea(ped, x1, y1, x2, y2, unknownFalse) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharSittingIdle(ped) end

---
---Returns a boolean indicating if the specified char is in vehicle.
---
---
---@param ped number (Ped) char handle
---@return boolean true if char is in vehicle
function IsCharSittingInAnyCar(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@param vehicle number (Vehicle) Car handle
---@return boolean
function IsCharSittingInCar(ped, vehicle) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharStopped(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharStuckUnderCar(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharSwimming(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@param otherChar number (Ped) Other char
---@return boolean
function IsCharTouchingChar(ped, otherChar) end

---
---This function returns true if character is touching specified object.
---
---
---@param ped number (Ped) Char handle.
---@param obj number (Object) Object handle.
---@return boolean Whether the specified character is touching the specified object.
function IsCharTouchingObject(ped, obj) end

---
---This function returns true if the character is touching the specified object.
---
---
---@param ped number (Ped) Char handle.
---@param obj number (Object) Object handle.
---@return boolean
function IsCharTouchingObjectOnFoot(ped, obj) end

---
---This function returns true if the character is touching specified vehicle.
---
---
---@param ped number (Ped) Char handle.
---@param vehicle number (Vehicle) Vehicle handle.
---@return boolean
function IsCharTouchingVehicle(ped, vehicle) end

---
---Returns whether the specified character is currently trying to enter a locked car.
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharTryingToEnterALockedCar(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharUsingAnyScenario(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param scenarioName string
---@return boolean
function IsCharUsingScenario(ped, scenarioName) end

---
---No description (
---
---
---@param ped number (Ped) Char handle
---@return boolean
function IsCharVisible(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return boolean
function IsCharWaitingForWorldCollision(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedAMissionPed(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedAttachedToAnyCar(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@param obj number (Object) Object
---@return boolean
function IsPedAttachedToObject(ped, obj) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean true if ped is being ripped out of a car
function IsPedBeingJacked(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedDoingDriveby(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedFleeing(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedHoldingAnObject(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedInCombat(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedInCover(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean true if ped is in your group
function IsPedInGroup(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedJacking(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@param otherChar number (Ped) Other char
---@return boolean
function IsPedLookingAtPed(ped, otherChar) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedRagdoll(ped) end

---
---No description (
---
---
---@param ped number (Ped) Ped handle
---@return boolean
function IsPedRetreating(ped) end

---
---This function returns .
---
---
---@param ped number (Ped) Char/Ped handle.
---@return boolean
function IsScriptedSpeechPlaying(ped) end

---
---The game will delete the char when appropiate (i.e. no player is in proximity) and basically makes them just like any other normal pedestrian, if the char was in a car it will drive off, if not then start walking on the nearest path.
---
---
---@return number (Ped) pPed Char Handle
function MarkCharAsNoLongerNeeded() end

---
---ePedMoveState:
---
---
---@param ped number (Ped) Ped ID
---@param state number (positive integer) Move State
---@return nil
function ModifyCharMoveState(ped, state) end

---
---This function removes all the specified characters weapons.
---
---
---@param ped number (Ped) Char handle.
---@return nil
function RemoveAllCharWeapons(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return nil
function RemoveCharDefensiveArea(ped) end

---
---This function removes the specified character "elegantly".
---
---
---@param ped number (Ped) Char handle.
---@return nil
function RemoveCharElegantly(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return nil
function RemoveCharFromGroup(ped) end

---
---This function revives the specified ped.
---
---
---@param ped number (Ped) Ped handle.
---@return nil
function ReviveInjuredPed(ped) end

---
---Makes the specified char say the specified phrase. If P5 is 1, speech that ends with \_MEGAPHONE will be spoken without echo.
---By the looks of it, if P3 and P4 are both 0, speech will never be spoken no matter what.
---If P3 is 1, regardless of P4, speech will always be spoken.
---If P3 is 0, and P4 is 1, speech will only be spoken if more than 15-17 seconds since the previous speech was spoken has passed. (Not sure on the exact time, or if the time is determined from the time the speech starts playing, or after it ends. However, it does seem like it's around 16.7 seconds)
---
---
---@param ped number (Ped) Char to say the speech
---@param phraseName string The id of the speech to say
---@param flag0 boolean Always speak (0 = depend on P4, 1 = always speak)
---@param flag1 boolean Allow speech once per 15-17 seconds
---@param style number (integer) Cancel megaphone (0 = don't cancel, 1 = cancel)
---@return nil
function SayAmbientSpeech(ped, phraseName, flag0, flag1, style) end

---
---Sets ammo in the given weapon to the given amount
---
---
---@param ped number (Ped) player index
---@param weapon number (positive integer) weapon type
---@param ammo number (positive integer) amount
---@return any
function SetAmmoInClip(ped, weapon, ammo) end

---
---No description (
---
---
---@param ped number (Ped)
---@param value boolean
---@return nil
function SetBlockingOfNonTemporaryEvents(ped, value) end

---
---This function sets the char accuracy. Accuracy appears to be from 0 to 100.
---
---
---@param ped number (Ped) Char Handle
---@param value number (positive integer) Accuracy
---@return nil
function SetCharAccuracy(ped, value) end

---
---This function sets the specified weapons ammo.
---
---
---@param ped number (Ped) Char handle.
---@param weapon number (positive integer) Weapon handle.
---@param ammo number (positive integer) Ammo amount.
---@return nil
function SetCharAmmo(ped, weapon, ammo) end

---
---This function sets the specified character as an enemy.
---
---
---@param ped number (Ped) Char handle.
---@param value boolean true/false
---@return nil
function SetCharAsEnemy(ped, value) end

---
---Before you can use any other SET\_CHAR\_ functions on a char you didn't create, you have to set them as mission chars.
---So, for instance, if you get a random ped using GET\_RANDOM\_CHAR\_IN\_AREA\_OFFSET\_NO\_SAVE, you first need to set that ped as a mission char before you can change any of their other flags.
---Setting a char as a mission char is essentially the opposite of MARK\_CHAR\_AS\_NO\_LONGER\_NEEDED.
---
---
---@param ped number (Ped) ped handle
---@return nil
function SetCharAsMissionChar(ped) end

---
---This function can prevent a character from being ejected from a motorbike through collisions. Unlike most functions, setting it to 0 means the character can be knocked off the bike and 1 means the player will not be knocked off. This function seems to affected by SET\_CHAR\_PROOFS. After this function is turned on, the function will stay on if the character is collision-proof. Turning this function off will not work until the collision-proof is turned off.
---
---
---@param ped number (Ped) char handle
---@param value boolean set (0=on / 1=off)
---@return nil
function SetCharCanBeKnockedOffBike(ped, value) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param enabled boolean true/false
---@return nil
function SetCharCanBeShotInVehicle(ped, enabled) end

---
---This function sets if the character can be dragged out of a vehicle.
---
---
---@param ped number (Ped) Char handle.
---@param enabled boolean true/false
---@return nil
function SetCharCantBeDraggedOut(ped, enabled) end

---
---
---
---
---@param ped number (Ped) Char Handle
---@param component number (positive integer) Ped Component
---@param modelVariation number (positive integer) Model Variation
---@param textureVariation number (positive integer) Texture Variation
---@return nil
function SetCharComponentVariation(ped, component, modelVariation, textureVariation) end

---
---This function will warp the character in P1 to the coordinates in x,y, and z. Similar to SET\_CHAR\_COORDINATES\_NO\_OFFSET but the character's feet is the point where the character will be placed by.
---
---
---@param ped number (Ped) char handle
---@param x number (float) X pos
---@param y number (float) Y pos
---@param z number (float) Z pos
---@return nil
function SetCharCoordinates(ped, x, y, z) end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function SetCharDefaultComponentVariation(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param heading number (float)
---@return nil
function SetCharDesiredHeading(ped, heading) end

---
---This function makes the character drop their weapons when they die, if set to true.
---
---
---@param ped number (Ped) Char handle.
---@param value boolean true/false
---@return nil
function SetCharDropsWeaponsWhenDead(ped, value) end

---
---This function set the character drugged up, if set to true.
---
---
---@param ped number (Ped) Char handle.
---@param drugged boolean true/false
---@return nil
function SetCharDruggedUp(ped, drugged) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param multiplier number (float) Multiplier.
---@return nil
function SetCharFireDamageMultiplier(ped, multiplier) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param value number (float) Apply gravity or Not
---@return nil
function SetCharGravity(ped, value) end

---
---Turns selected character at certain angle.
---
---
---@param ped number (Ped) char handle
---@param heading number (float) angle of rotation
---@return nil
function SetCharHeading(ped, heading) end

---
---This function sets the characters health to the specified number.
---
---
---@param ped number (Ped) Char handle.
---@param health number (positive integer) Players health to set.
---@return nil
function SetCharHealth(ped, health) end

---
---This function sets the character to invincible, if set to true.
---
---
---@param ped number (Ped) Char handle.
---@param enable boolean true/false
---@return nil
function SetCharInvincible(ped, enable) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param enable boolean true/false
---@return nil
function SetCharIsTargetPriority(ped, enable) end

---
---SET\_CHAR\_MAX\_HEALTH
---This opcode sets the characters max health.
---set, char, actor, max, health
---
---
---@param ped number (Ped)
---@param value number (positive integer)
---@return nil
function SetCharMaxHealth(ped, value) end

---
---This function sets the specified character's money to the specified amount.
---
---
---@param ped number (Ped) Char handle.
---@param amount number (positive integer) Money amount.
---@return nil
function SetCharMoney(ped, amount) end

---
---This function sets whether the char will leave their group if the char is out of the group separation range (SET\_GROUP\_SEPARATION\_RANGE).
---
---
---@param ped number (Ped) Char Handle
---@param value boolean True/False
---@return nil
function SetCharNeverLeavesGroup(ped, value) end

---
---No description (
---
---
---@param ped number (Ped) char handle
---@param unknown0 boolean bullet-proof
---@param fallingDamage boolean fire-proof
---@param unknown1 boolean explosion-proof
---@param unknown2 boolean collision-proof
---@param unknown3 boolean melee-proof
---@return nil
function SetCharProofs(ped, unknown0, fallingDamage, unknown1, unknown2, unknown3) end

---
---Sets a ped's prop (hats, glasses, etc) variation, similar to component variations.
---Example:
---u32 Prop1; u32 Prop2; GET\_CHAR\_PROP\_INDEX(Ped1, 0, &Prop1); CLEAR\_CHAR\_PROP(GetPlayerPed(), 0); SET\_CHAR\_PROP\_INDEX(GetPlayerPed(), 0, Prop2); GET\_CHAR\_PROP\_INDEX(Ped1, 1, &Prop2); CLEAR\_CHAR\_PROP(GetPlayerPed(), 1); SET\_CHAR\_PROP\_INDEX(GetPlayerPed(), 1, Prop2);
---
---
---@param ped number (Ped) Ped Handle
---@param propType number (positive integer) Prop type (hat or glasses)
---@param index number (positive integer) Prop index
---@return nil
function SetCharPropIndex(ped, propType, index) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@return nil
function SetCharRandomComponentVariation(ped) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param x number (float) X-Coordinate.
---@param y number (float) Y-Coordinate.
---@param z number (float) Z-Coordinate.
---@param radius number (float) Radius.
---@return nil
function SetCharSphereDefensiveArea(ped, x, y, z, radius) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param value boolean true/false
---@return nil
function SetCharSuffersCriticalHits(ped, value) end

---
---Sets x, y and z velocities of the char.
---
---
---@param ped number (Ped) Pointer to Char
---@param x number (float) The X velocity of the char to be set.
---@param y number (float) The Y velocity of the char to be set.
---@param z number (float) The Z velocity of the char to be set.
---@return nil
function SetCharVelocity(ped, x, y, z) end

---
---This function sets the specified characters visibility.
---
---
---@param ped number (Ped) Char handle.
---@param value boolean true/false
---@return nil
function SetCharVisible(ped, value) end

---
---No description (
---
---
---@param ped number (Ped) char handle
---@param wanted boolean true/false
---@return nil
function SetCharWantedByPolice(ped, wanted) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param value boolean true/false
---@return nil
function SetCharWillDoDrivebys(ped, value) end

---
---No description (
---
---
---@param ped number (Ped) Char handle.
---@param value boolean true/false
---@return nil
function SetCharWillFlyThroughWindscreen(ped, value) end

---
---This function determines if an injured ped will move in agony. Ped is injured if they are on the ground after being shot, but have not died yet.
---
---
---@param ped number (Ped) Char Handle
---@param value boolean True/False
---@return nil
function SetCharWillMoveWhenInjured(ped, value) end

---
---No description (
---
---
---@param ped number (Ped)
---@param value boolean
---@return nil
function SetCharWillUseCarsInCombat(ped, value) end

---
---No description (
---
---
---@param ped number (Ped)
---@param value boolean
---@return nil
function SetCharWillUseCover(ped, value) end

---
---Sets the current weapon in the peds hand
---
---
---@param ped number (Ped) Ped Handle
---@param w number (positive integer) Weapon ID List_of_Weapons_(GTA4)
---@param unknownTrue boolean true/false
---@return nil
function SetCurrentCharWeapon(ped, w, unknownTrue) end

---
---Specified group member will duck when player (of same group) aims at them.
---
---
---@param ped number (Ped) Char Handle
---@param value boolean True/False
---@return nil
function SetGroupCharDucksWhenAimedAt(ped, value) end

---
---No description (
---
---
---@param ped number (Ped)
---@param value boolean
---@return nil
function SetIgnoreLowPriorityShockingEvents(ped, value) end

---
---No description (
---
---
---@param ped number (Ped)
---@param value boolean
---@return nil
function SetPedDiesWhenInjured(ped, value) end

---
---No description (
---
---
---@param ped number (Ped)
---@param value boolean
---@return nil
function SetPedIsBlindRaging(ped, value) end

---
---Makes the specified ped drunk or not drunk
---
---
---@param ped number (Ped) ped handle
---@param value boolean drunk or not
---@return nil
function SetPedIsDrunk(ped, value) end

---
---This function seems to allow an NPC to jump off of, possibly low, heights. If an NPC is on top of a building, not a tall one, they will jump off to land on ground if they need to.
---
---
---@param ped number (Ped) Char Handle
---@param value boolean True/False
---@return nil
function SetPedPathMayDropFromHeight(ped, value) end

---
---This function allows an NPC to climb over walls and whatever else can be climbed.
---
---
---@param ped number (Ped) Char Handle
---@param value boolean True/False
---@return nil
function SetPedPathMayUseClimbovers(ped, value) end

---
---This function allows an NPC to use ladders.
---
---
---@param ped number (Ped) Char Handle
---@param value boolean True/False
---@return nil
function SetPedPathMayUseLadders(ped, value) end

---
---No description (
---
---
---@param ped number (Ped)
---@param key number (positive integer)
---@return nil
function SetRoomForCharByKey(ped, key) end

---
---This function sets the distance in which the char will be alert to enemies.
---NOTE: Uncertain on its effects on player controlled chars and if anymore effects exist (i.e. blips showing up or not on radar).
---
---
---@param ped number (Ped) Char ID
---@param value number (float) Range (in meters)
---@return nil
function SetSenseRange(ped, value) end

---
---No description (
---
---
---@param ped number (Ped) character handle
---@param unknownTrue boolean instant transition
---@return nil
function SwitchPedToAnimated(ped, unknownTrue) end

---
---No description (
---
---
---@param ped number (Ped)
---@param unk number (integer)
---@param time number (integer)
---@param flag0 boolean
---@param flag1 boolean
---@param flag2 boolean
---@param flag3 boolean
---@return boolean
function SwitchPedToRagdoll(ped, unk, time, flag0, flag1, flag2, flag3) end

---
---No description (
---
---
---@param ped number (Ped)
---@param removed boolean
---@return nil
function RemovePedHelmet(ped, removed) end

---
---No description (
---
---
---@param ped number (Ped)
---@param weapon number (positive integer)
---@return nil
function RemoveWeaponFromChar(ped, weapon) end

---
---This function can turn off ragdoll for the character. When ragdoll is turned off, movements that relies on ragdoll animations will use prerecorded animations in a way similar to previous games. If the animation doesn't exist, awkward or no movement happens.
---
---
---@param ped number (Ped) char handle
---@param value boolean set (0=off / 1=on)
---@return nil
function UnlockRagdoll(ped, value) end

---
---No description (
---
---
---@param ped number (Ped) Char Handle
---@param x number (float) X pos
---@param y number (float) Y pos
---@param z number (float) Z pos
---@return nil
function WarpCharFromCarToCoord(ped, x, y, z) end

---
---This function teleports the specified character in the specified vehicle as driver.
---
---
---@param ped number (Ped) Char handle
---@param vehicle number (Vehicle) Vehicle handle
---@return nil
function WarpCharIntoCar(ped, vehicle) end

---
---This function teleports the specified character in the specified vehicle as passenger.
---
---
---@param ped number (Ped) Char handle
---@param vehicle number (Vehicle) Vehicle handle
---@param seatIndex number (positive integer)
---@return nil
function WarpCharIntoCarAsPassenger(ped, vehicle, seatIndex) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param seatIndex number (positive integer)
---@return nil
function WarpCharFromCarToCar(ped, vehicle, seatIndex) end

---
---This function makes the characters task to keep on if true and otherwise if false. Use this native after every TASK\_.... function.
---
---
---@param ped number (Ped) Char handle.
---@param value boolean True/False
---@return nil
function SetCharKeepTask(ped, value) end

---
---Sets the driving speed for a specified Ped.
---
---
---@param ped number (Ped) Ped Handle
---@param speed number (float) Cruise Speed
---@return nil
function SetDriveTaskCruiseSpeed(ped, speed) end

---
---No description (
---
---
---@param ped number (Ped) character handle
---@param heading number (float) heading
---@return nil
function TaskAchieveHeading(ped, heading) end

---
---No description (
---
---
---@param ped number (Ped) character handle
---@param targetPed number (Ped) target character handle
---@param duration number (positive integer) duration in ms
---@return nil
function TaskAimGunAtChar(ped, targetPed, duration) end

---
---No description (
---
---
---@param ped number (Ped) character handle
---@param tX number (float) target x-coordinate
---@param tY number (float) target y-coordinate
---@param tZ number (float) target z-coordinate
---@param duration number (positive integer) duration in ms
---@return nil
function TaskAimGunAtCoord(ped, tX, tY, tZ, duration) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param speed number (float)
---@param drivingStyle number (positive integer)
---@return nil
function TaskCarDriveWander(ped, vehicle, speed, drivingStyle) end

---
---This function will have the char (parameter\_1) use the vehicle (parameter\_2) to follow the target vehicle (parameter\_3). The char (parameter\_1) will get in the driver of the vehicle automatically.
---
---Known Flags Flag 2 and 4 can be combined (2 binary or 4) to make the car go to the target, stop, then go to the target, stop, and so on.
---Known Driving Styles
---
---
---@param ped number (Ped) Char Handle
---@param vehicle number (Vehicle) Vehicle Handle
---@param targetEntity number (positive integer) Target Vehicle Handle
---@param missionType number (positive integer) Flags
---@param speed number (float) Driving speed (Meters per second)
---@param drivingStyle number (positive integer) Driving style
---@param unknown6_10 number (positive integer) Distance from target at which to stop (Flag 4 must be specified)
---@param unknown7_5 number (positive integer) Unknown (seems to be "10")
---@return nil
function TaskCarMission(ped, vehicle, targetEntity, missionType, speed, drivingStyle, unknown6_10, unknown7_5) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param targetEntity number (positive integer)
---@param missionType number (positive integer)
---@param speed number (float)
---@param drivingStyle number (positive integer)
---@param unknown6_10 number (positive integer)
---@param unknown7_5 number (positive integer)
---@return nil
function TaskCarMissionNotAgainstTraffic(ped, vehicle, targetEntity, missionType, speed, drivingStyle, unknown6_10, unknown7_5) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown0_4 number (positive integer)
---@param speed number (float)
---@param unknown2_1 number (positive integer)
---@param unknown3_5 number (positive integer)
---@param unknown4_10 number (positive integer)
---@return nil
function TaskCarMissionCoorsTarget(ped, vehicle, x, y, z, unknown0_4, speed, unknown2_1, unknown3_5, unknown4_10) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown0_4 number (positive integer)
---@param speed number (float)
---@param unknown2_1 number (positive integer)
---@param unknown3_5 number (positive integer)
---@param unknown4_10 number (positive integer)
---@return nil
function TaskCarMissionCoorsTargetNotAgainstTraffic(ped, vehicle, x, y, z, unknown0_4, speed, unknown2_1, unknown3_5, unknown4_10) end

---
---This function will have the char (parameter\_1) use the vehicle (parameter\_2) to follow the target char (parameter\_3). The char (parameter\_1) will get in the driver of the vehicle automatically.
---
---Known Flags Flag 2 and 4 can be combined (2 binary or 4) to make the car go to the target, stop, then go to the target, stop, and so on.
---Known Driving Styles
---
---
---@param ped number (Ped) Char Handle
---@param vehicle number (Vehicle) Vehicle Handle
---@param target number (Ped) Target Char Handle
---@param unknown0_4 number (positive integer) Flags
---@param speed number (float) Driving speed (Meters per second)
---@param unknown2_1 number (positive integer) Driving style
---@param unknown3_5 number (positive integer) Distance from target at which to stop (Flag 4 must be specified)
---@param unknown4_10 number (positive integer) Unknown (seems to be "10")
---@return nil
function TaskCarMissionPedTarget(ped, vehicle, target, unknown0_4, speed, unknown2_1, unknown3_5, unknown4_10) end

---
---Assigns a temporary task to a vehicle.
---Tasks:
---1: slows down softly
---2: slows down hardly and unusable for ever
---3: slows down softly and then drive backwards
---4: slows down hardly and turns left while slowing down
---5: slows down hardly and turns right while slowing down
---6: slows down hardly
---7: turns (left)
---8: turns (right)
---9: drive forwards (with a high rpm)
---10: soft turn (right)
---11: soft turn (left)
---Thanks to LMS.
---
---
---@param ped number (Ped) Target Ped
---@param vehicle number (Vehicle) Target Vehicle
---@param action number (positive integer) Task
---@param duration number (positive integer) Duration
---@return nil
function TaskCarTempAction(ped, vehicle, action, duration) end

---
---This function forces the aggressor (ped from parameter 1) to attack the target (ped from param. 2).
---
---
---@param ped number (Ped) Ped Handle for aggressor
---@param target number (Ped) Ped Handle for target
---@return nil
function TaskCombat(ped, target) end

---
---This function will have the char attack any enemies to it, or to the group it is in, who are within the radius of the char. Char will continue to follow group leader, though will move slower while firing.
---NOTE: The task may end if/when no enemies are around.
---NOTE: This task may also make the char attack others whose relationship with the ped type is set to hated even if they are not a threat.
---
---
---@param ped number (Ped) Char Handle
---@param radius number (float) Radius
---@return nil
function TaskCombatHatedTargetsAroundChar(ped, radius) end

---
---No description (
---
---
---@param ped number (Ped)
---@param radius number (float)
---@param duration number (positive integer)
---@return nil
function TaskCombatHatedTargetsAroundCharTimed(ped, radius, duration) end

---
---No description (
---
---
---@param ped number (Ped)
---@param target number (Char)
---@param duration number (positive integer)
---@return nil
function TaskCombatTimed(ped, target, duration) end

---
---The specified char will die.
---
---
---@param ped number (Ped) Char Handle
---@return nil
function TaskDie(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param duration number (positive integer)
---@return nil
function TaskEnterCarAsDriver(ped, vehicle, duration) end

---
---This function will have the char enter the vehicle as a passenger at the specified seat index. If the char is still trying to get into the vehicle and the "duration" is up, the char will be warped into the vehicle at to seat index.
---Works on the player char also.
---
---
---@param ped number (Ped) Char Handle
---@param vehicle number (Vehicle) Vehicle Handle
---@param duration number (positive integer) Duration  (milliseconds)
---@param seatIndex number (positive integer) Seat Index  (zero based)
---@return nil
function TaskEnterCarAsPassenger(ped, vehicle, duration, seatIndex) end

---
---This function will have everyone to leave the vehicle in Parameter 1. Make sure the vehicle does exist.
---
---
---@param vehicle number (Vehicle) Vehicle Handle
---@return nil
function TaskEveryoneLeaveCar(vehicle) end

---
---Similar to TASK\_FOLLOW\_NAV\_MESH\_TO\_COORD\_NO\_STOP. Parameter 7 use to be a radius of point (-1 will be straight at point)
---
---
---@param ped number (Ped) Ped handle
---@param x number (float) X coordinate
---@param y number (float) Y coordinate
---@param z number (float) Z coordinate
---@param unknown0_2 number (positive integer) Movement type (2 = walk, 3 = jog, 4 = run)
---@param unknown1_minus1 number (positive integer) Unknown (seems to be -2)
---@param unknown2_1 number (float) Radius of point
---@return nil
function TaskFollowNavMeshToCoord(ped, x, y, z, unknown0_2, unknown1_minus1, unknown2_1) end

---
---Similar to TASK\_FOLLOW\_NAV\_MESH\_TO\_COORD but makes follow to point non stop. Parameter 7 is a radius of point (p2,p3,p4) (-1 makes ped (p1) follow straight at point)
---See also TASK\_FOLLOW\_NAV\_MESH\_AND\_SLIDE\_TO\_COORD for combine ..FOLLOW\_NAV\_MESH.. and .. SLIDE\_TO\_COORD
---
---
---@param ped number (Ped) Ped handle
---@param x number (float) X coordinate
---@param y number (float) Y coordinate
---@param z number (float) Z coordinate
---@param unknown0_2 number (positive integer) Movement type (2 = walk, 3 = jog, 4 = run)
---@param unknown1_minus1 number (positive integer) Unknown (seems to be -2)
---@param unknown2_1 number (float) Radius of point
---@return nil
function TaskFollowNavMeshToCoordNoStop(ped, x, y, z, unknown0_2, unknown1_minus1, unknown2_1) end

---
---Makes the specified char go to the specified coordinates, using the specified move type.
---If P6 is not -1, the char will warp to the specified coordinates after 2 seconds.
---Known Move Types
---
---
---@param ped number (Ped) Char to do the task
---@param x number (float) X Coordinate
---@param y number (float) Y Coordinate
---@param z number (float) Z Coordinate
---@param unknown2 number (positive integer) Move type
---@param unknown45000 number (positive integer) Unknown (suggested: -1)
---@return nil
function TaskGoStraightToCoord(ped, x, y, z, unknown2, unknown45000) end

---
---No description (
---
---
---@param ped number (Ped)
---@param target number (Ped)
---@param duration number (positive integer)
---@param offsetRight number (float)
---@param offsetFront number (float)
---@return nil
function TaskGotoCharOffset(ped, target, duration, offsetRight, offsetFront) end

---
---This function makes the char guard their current position for the specified duration.
---
---
---@param ped number (Ped) Char Handle
---@param unknown0_15 number (float) Unknown  (Appears to be "15")
---@param unknown1_10 number (float) Unknown  (Appears to be "10")
---@param unknown2_1 number (positive integer) Duration  (in milliseconds)
---@return nil
function TaskGuardCurrentPosition(ped, unknown0_15, unknown1_10, unknown2_1) end

---
---No description (
---
---
---@param ped number (Ped)
---@param duration number (positive integer)
---@return nil
function TaskHandsUp(ped, duration) end

---
---This function seems to act as a 'Flight\_To'. You can use it to set the altitude of the waypoint.
---To be confirmedï¿½: p4 will specify if Destination is absolute or relative to p4 character position.
---
---
---@param ped number (Ped) Char (pilot) Handle
---@param heli number (Vehicle) Helicopter Handle
---@param uk0_0 number (positive integer) Unknown  (Appears to be "0")
---@param uk1_0 number (positive integer) Unknown role (Appears to be the Handle of the local Player OR to be "0")
---@param pX number (float) Destination X
---@param pY number (float) Destination Y
---@param pZ number (float) Destination Z
---@param uk2_4 number (positive integer) Unknown (Values in sco are from 0 to 19)
---@param speed number (float) Speed
---@param uk3_5 number (positive integer) Unknown  (Appears to be from "0" to "30")
---@param uk4_minus1 number (float) Unknown  (often set to "-1",it haves sometime values up to 90.0f)
---@param uk5_round_z_plus_1 number (positive integer) Unknown  (sometime set to "-1", it seems to have a role regarding altitude)
---@param uk6_40 number (positive integer) Unknown  (sometime set to "-1")
---@return nil
function TaskHeliMission(ped, heli, uk0_0, uk1_0, pX, pY, pZ, uk2_4, speed, uk3_5, uk4_minus1, uk5_round_z_plus_1, uk6_40) end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function TaskLeaveAnyCar(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@return nil
function TaskLeaveCar(ped, vehicle) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@return nil
function TaskLeaveCarDontCloseDoor(ped, vehicle) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@return nil
function TaskLeaveCarImmediately(ped, vehicle) end

---
---Character 1 will look at character 2 for the given duration.
---
---
---@param ped number (Ped) Char handle 1
---@param targetPed number (Ped) Char handle 2
---@param duration number (positive integer) Duration (in milliseconds)
---@param unknown_0 number (positive integer) Unknown
---@return nil
function TaskLookAtChar(ped, targetPed, duration, unknown_0) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param duration number (positive integer)
---@param unknown_0 number (positive integer)
---@return nil
function TaskLookAtCoord(ped, x, y, z, duration, unknown_0) end

---
---No description (
---
---
---@param ped number (Ped)
---@param targetObject number (Object)
---@param duration number (positive integer)
---@param unknown_0 number (positive integer)
---@return nil
function TaskLookAtObject(ped, targetObject, duration, unknown_0) end

---
---No description (
---
---
---@param ped number (Ped)
---@param targetVehicle number (Vehicle)
---@param duration number (positive integer)
---@param unknown_0 number (positive integer)
---@return nil
function TaskLookAtVehicle(ped, targetVehicle, duration, unknown_0) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param unknown0 number (positive integer)
---@return nil
function TaskOpenDriverDoor(ped, vehicle, unknown0) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param seatIndex number (positive integer)
---@param unknown0 number (positive integer)
---@return nil
function TaskOpenPassengerDoor(ped, vehicle, seatIndex, unknown0) end

---
---No description (
---
---
---@param ped number (Ped)
---@param duration number (positive integer)
---@return nil
function TaskPause(ped, duration) end

---
---No description (
---
---
---@param ped number (Ped)
---@param animName string
---@param animSet string
---@param unknown0_8 number (float)
---@param unknown1_0 number (positive integer)
---@param flags number (positive integer)
---@return nil
function TaskPlayAnimWithFlags(ped, animName, animSet, unknown0_8, unknown1_0, flags) end

---
---No description (
---
---
---@param ped number (Ped)
---@param dm number (DecisionMaker)
---@return nil
function TaskSetCharDecisionMaker(ped, dm) end

---
---No description (
---
---
---@param ped number (Ped)
---@param dm number (DecisionMaker)
---@return nil
function TaskSetCombatDecisionMaker(ped, dm) end

---
---No description (
---
---
---@param ped number (Ped)
---@param fleeFromPed number (Ped)
---@param unknown0_100 number (float)
---@param duration number (positive integer)
---@return nil
function TaskSmartFleeChar(ped, fleeFromPed, unknown0_100, duration) end

---
---No description (
---
---
---@param ped number (Ped)
---@param fleeFromPed number (Ped)
---@param unknown0_100 number (float)
---@param duration number (positive integer)
---@return nil
function TaskSmartFleeCharPreferringPavements(ped, fleeFromPed, unknown0_100, duration) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown0_100 number (float)
---@param duration number (positive integer)
---@return nil
function TaskSmartFleePoint(ped, x, y, z, unknown0_100, duration) end

---
---No description (
---
---
---@param ped number (Ped)
---@param duration number (integer)
---@return nil
function TaskStandStill(ped, duration) end

---
---No description (
---
---
---@param ped number (Ped)
---@param weapon number (positive integer)
---@return nil
function TaskSwapWeapon(ped, weapon) end

---
---What this function does is either unknown or untested.
---
---
---@param ped number (Ped) Char Handle
---@param targetPed number (Ped) Char Handle
---@return nil
function TaskTurnCharToFaceChar(ped, targetPed) end

---
---No description (
---
---
---@param ped number (Ped)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function TaskTurnCharToFaceCoord(ped, x, y, z) end

---
---No description (
---
---
---@param ped number (Ped)
---@param use boolean
---@return nil
function TaskUseMobilePhone(ped, use) end

---
---No description (
---
---
---@param ped number (Ped)
---@param duration number (positive integer)
---@return nil
function TaskUseMobilePhoneTimed(ped, duration) end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function TaskWanderStandard(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@return nil
function TaskWarpCharIntoCarAsDriver(ped, vehicle) end

---
---No description (
---
---
---@param ped number (Ped)
---@param vehicle number (Vehicle)
---@param seatIndex number (positive integer)
---@return nil
function TaskWarpCharIntoCarAsPassenger(ped, vehicle, seatIndex) end

---
---No description (
---
---
---@return number (TaskSequence) pTaskSequence
function OpenSequenceTask() end

---
---No description (
---
---
---@param taskSequence number (TaskSequence)
---@return nil
function CloseSequenceTask(taskSequence) end

---
---No description (
---
---
---@param ped number (Ped)
---@param taskSequence number (TaskSequence)
---@return nil
function TaskPerformSequence(ped, taskSequence) end

---
---No description (
---
---
---@param taskSequence number (TaskSequence)
---@return nil
function ClearSequenceTask(taskSequence) end

---
---Allows or disallows scenario peds to be returned by the next command.
---
---
---@param value boolean Allows or disallows scenario peds to be returned by the next command
---@return nil
function AllowScenarioPedsToBeReturnedByNextCommand(value) end

---
---Begins the transmission of Character search criteria.
---
---
---@return nil
function BeginCharSearchCriteria() end

---
---No description (
---
---
---@return nil
function EndCharSearchCriteria() end

---
---Gets the closest character in the specified radius.
---
---
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param radius number (float) Radius
---@param unknown1 number (positive integer) Unknown (usually 0)
---@param unknown2 number (positive integer) Unknown (usually 70)
---@return boolean
---@return number (Ped) pPed Ped handle
function GetClosestChar(x, y, z, radius, unknown1, unknown2) end

---
---This function will select a random char in the specified radius and return their pointer in Parameter 7.
---At the very minimum, GET\_RANDOM\_CHAR\_IN\_AREA\_OFFSET\_NO\_SAVE must be preceded by BEGIN\_CHAR\_SEARCH\_CRITERIA and END\_CHAR\_SEARCH\_CRITERIA.
---
---
---@param x number (float) X Corner of Radius
---@param y number (float) Y Corner of Radius
---@param z number (float) Z Corner of Radius
---@param sx number (float) X Radius
---@param sy number (float) Y Radius
---@param sz number (float) Z Radius
---@return number (Ped) pPed return selected ped
function GetRandomCharInAreaOffsetNoSave(x, y, z, sx, sy, sz) end

---
---No description (
---
---
---@param flagId number (positive integer)
---@return nil
function SearchCriteriaConsiderPedsWithFlagTrue(flagId) end

---
---No description (
---
---
---@param flagId number (positive integer)
---@return nil
function SearchCriteriaRejectPedsWithFlagTrue(flagId) end

---
---No description (
---
---
---@param unknownFalse boolean unknown (false suggested)
---@param unknownTrue boolean unknown (true suggested)
---@return number (Group) pGroup variable to store group
function CreateGroup(unknownFalse, unknownTrue) end

---
---No description (
---
---
---@param group number (Group) group handle
---@return boolean returns if the group exists or not
function DoesGroupExist(group) end

---
---No description (
---
---
---@param group number (Group)
---@return number (Ped) pPed
function GetGroupLeader(group) end

---
---No description (
---
---
---@param group number (Group)
---@param index number (positive integer)
---@return number (Ped) pPed
function GetGroupMember(group, index) end

---
---This function returns the number of player-controlled and non-player-controlled chars in the specified group. Use GET\_PLAYER\_GROUP to retrieve the pointer for the current player's group.
---
---
---@param group number (Group) group pointer
---@return number (positive integer) pStartIndex variable to store number of player-controlled chars in group(?)
---@return number (positive integer) pCount variable to store number of non-player-controlled chars in group
function GetGroupSize(group) end

---
---I find this only works if you run the command on your char and your current group.
---
---
---@param ped number (Ped) char handle
---@param group number (Group) group handle
---@return boolean true/false
function IsGroupLeader(ped, group) end

---
---No description (
---
---
---@param ped number (Ped)
---@param g number (Group)
---@return boolean
function IsGroupMember(ped, g) end

---
---No description (
---
---
---@param group number (Group)
---@return nil
function RemoveGroup(group) end

---
---No description (
---
---
---@param group number (Group)
---@param status number (positive integer)
---@return nil
function SetGroupFollowStatus(group, status) end

---
---This function sets the the group formation to the type specified
---
---
---@param group number (Group) Group ID
---@param formation number (positive integer) Formation
---@return nil
function SetGroupFormation(group, formation) end

---
---This function sets the spacing, in meters, for the npc members of a group.
---
---
---@param group number (Group) Group ID
---@param space number (float) Spacing
---@return nil
function SetGroupFormationSpacing(group, space) end

---
---Sets the specified char as the leader of the specified group.
---
---
---@param group number (Group) Group ID
---@param leader number (Ped) Char ID
---@return nil
function SetGroupLeader(group, leader) end

---
---This function adds the ped specified in the second parameter to the group specified in the first parameter.
---
---
---@param group number (Group) group id
---@param member number (Ped) ped id
---@return nil
function SetGroupMember(group, member) end

---
---A member, at least an npc, of the specified group appear to leave the group if this "Distance" between the member and their group is exceeded.
---
---
---@param group number (Group) Group ID
---@param seperation number (float) Distance (in meters)
---@return nil
function SetGroupSeparationRange(group, seperation) end

---
---Allows or disallows the gang relationships to be changed by the next command.
---
---
---@param value boolean Allows or disallows the gang relationships to be changed by the next command
---@return nil
function AllowGangRelationshipsToBeChangedByNextCommand(value) end

---
---No description (
---
---
---@param ped number (Ped)
---@param relationshipGroup number (positive integer)
---@param enable boolean
---@return nil
function SetCharNotDamagedByRelationshipGroup(ped, relationshipGroup, enable) end

---
---No description (
---
---
---@param ped number (Ped)
---@param relationshipLevel number (positive integer)
---@param relationshipGroup number (positive integer)
---@return nil
function SetCharRelationship(ped, relationshipLevel, relationshipGroup) end

---
---Assigns the ped specified in Parameter 1 to the relationship group specified in Parameter 2.
---
---
---@param ped number (Ped) ped handle
---@param relationshipGroup number (positive integer) relationship group
---@return nil
function SetCharRelationshipGroup(ped, relationshipGroup) end

---
---Sets the group in Parameter 2 to have the relationship type specified in Parameter 1 with the group in Parameter 3.
---For instance, the parameters (5, 14, 15) would make the MEDIC group (14) hate (5) the FIREMEN group (15).
---
---
---@param relationshipLevel number (positive integer) relationship type
---@param relationshipGroup1 number (positive integer) relationship group 1
---@param relationshipGroup2 number (positive integer) relationship group 2
---@return nil
function SetRelationship(relationshipLevel, relationshipGroup1, relationshipGroup2) end

---
---Adds an upside down check to a vehicle.
---
---
---@param vehicle number (Vehicle) Vehicle Id
---@return nil
function AddUpsidedownCarCheck(vehicle) end

---
---Anchors or lets loose a boat.
---
---
---@param boat number (Vehicle) Vehicle Id
---@param anchor boolean Whether or not the boat should be anchored
---@return nil
function AnchorBoat(boat, anchor) end

---
---Applies force to a car.
---P10 IsForceDirectionRelative specifies if the force direction is relative to direction object is facing (true), or static world direction (false).
---
---
---@param vehicle number (Vehicle) Car Id
---@param unknown0_3 number (positive integer) Unknown, suggested: true
---@param x number (float) X Force Amount
---@param y number (float) Y Force Amount
---@param z number (float) Z Force Amount
---@param spinX number (float) X Force Position
---@param spinY number (float) Y Force Position
---@param spinZ number (float) Z Force Position
---@param unknown4_0 number (positive integer) Unknown, suggested: true
---@param unknown5_1 number (positive integer) IsForceDirectionRelative
---@param unknown6_1 number (positive integer) Unknown, suggested: true
---@param unknown7_1 number (positive integer) Unknown, suggested: true
---@return nil
function ApplyForceToCar(vehicle, unknown0_3, x, y, z, spinX, spinY, spinZ, unknown4_0, unknown5_1, unknown6_1, unknown7_1) end

---
---Returns true or false depending on whether the taxi lights are on.
---
---
---@param vehicle number (Vehicle) Vehicle Id
---@return boolean True of false depending on whether the taxi lights are on
function AreTaxiLightsOn(vehicle) end

---
---Breaks or repairs a car door.
---Doors IDï¿½:
---0 - Left front door
---1 - Right front door
---2 - Left rear door
---3 - Right rear door
---4 - Hood
---5 - Trunk
---
---
---@param vehicle number (Vehicle) Vehicle Id
---@param door number (positive integer) Door Id
---@param unknownFalse boolean True or false depending on whether you want the Car Door to vanish or snap off
---@return nil
function BreakCarDoor(vehicle, door, unknownFalse) end

---
---This function instantly deflates a vehicle's tire. The tire still stays intact. A crude drawing below shows which ID belongs to which wheel.
---The first is for two-wheeled vehicles like motorbikes, the second is for four-wheeled vehicles like most cars and small trucks, and the third is for six-wheeled vehicles like large trucks.
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param tyre number (positive integer) Wheel Id
---@return nil
function BurstCarTyre(vehicle, tyre) end

---
---No description (
---
---
---@param nameHash number (positive integer) car model hash
---@param x number (float) X pos
---@param y number (float) Y pos
---@param z number (float) Z pos
---@param unknownTrue boolean unknown (always 1?)
---@return number (Vehicle) pVehicle variable to store car handle
function CreateCar(nameHash, x, y, z, unknownTrue) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param charType number (positive integer) character type
---@param model number (positive integer) character model
---@param passengerIndex number (positive integer) passenger seat index
---@return number (Ped) pPed variable to store ped
function CreateCharAsPassenger(vehicle, charType, model, passengerIndex) end

---
---This function creates a new character inside the specified vehicle.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param charType number (positive integer) pedtype
---@param model number (positive integer) ped model hash
---@return number (Ped) pPed variable to store ped handle
function CreateCharInsideCar(vehicle, charType, model) end

---
---This function change the colors of the specified vehicle.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param colour1 number (ColourIndex) 1st color ID
---@param colour2 number (ColourIndex) 2nd color ID
---@return nil
function ChangeCarColour(vehicle, colour1, colour2) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return nil
function ClearCarLastDamageEntity(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return nil
function ClearCarLastWeaponDamage(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return nil
function ClearRoomForCar(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return nil
function CloseAllCarDoors(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param door number (positive integer)
---@param unknown_maybe_open number (positive integer)
---@param angle number (float)
---@return nil
function ControlCarDoor(vehicle, door, unknown_maybe_open, angle) end

---
---No description (
---
---
---@param model number (positive integer) model
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@return boolean unknown
function CreateEmergencyServicesCar(model, x, y, z) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param seat number (positive integer) seat
---@return number (Ped) pPed variable to store ped
function CreateRandomCharAsPassenger(vehicle, seat) end

---
---No description (
---
---
---@return number (Vehicle) pVehicle car handle
function DeleteCar() end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return nil
function DetachCar(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return boolean returns if the vehicle has a roof or not
function DoesCarHaveRoof(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return boolean
function DoesCarHaveStuckCarCheck(vehicle) end

---
---Returns a boolean indicating if the specified vehicle handle is allocated in the game.
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return boolean true if the vehicle handle is allocated
function DoesVehicleExist(vehicle) end

---
---No description (
---
---
---@param ped number (Ped) ped handle
---@param enable boolean enable
---@return nil
function EnablePedHelmet(ped, enable) end

---
---This function explode the specified vehicle with explosion or not.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param unknownTrue boolean Type of explosion (0=No smoke and projection, 1=Normal)
---@param unknownFalse boolean Unknown
---@return nil
function ExplodeCar(vehicle, unknownTrue, unknownFalse) end

---
---No description (
---
---
---@param vehicle number (Vehicle) Car handle.
---@return nil
function ExtinguishCarFire(vehicle) end

---
---This function repair the specified vehicle.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@return nil
function FixCar(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param tyre number (positive integer) which tire/tyre
---@return nil
function FixCarTyre(vehicle, tyre) end

---
---No description (
---
---
---@param vehicle number (Vehicle) Car handle.
---@param frozen boolean true/false
---@return nil
function FreezeCarPosition(vehicle, frozen) end

---
---No description (
---
---
---@param vehicle number (Vehicle) Car handle.
---@param frozen boolean true/false
---@return nil
function FreezeCarPositionAndDontLoadCollision(vehicle, frozen) end

---
---This function will get the handle of the car driven by the character in P1, and store it to a variable.
---
---
---@param ped number (Ped) char handle
---@return number (Vehicle) pVehicle variable to store car handle
function GetCarCharIsUsing(ped) end

---
---This function will get the 1st and the 2nd color ID of the specified vehicle, and store them to variables.
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (ColourIndex) pColour1 variable to store 1st color ID
---@return number (ColourIndex) pColour2 variable to store 2nd color ID
function GetCarColours(vehicle) end

---
---This function will get the x,y,z coordinates of a car, and store them to variables.
---
---
---@param vehicle number (Vehicle) car handle
---@return number (float) pX variable to store X pos
---@return number (float) pY variable to store Y pos
---@return number (float) pZ variable to store Z pos
function GetCarCoordinates(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@return any (Vector3, vector3 pDeformation variable to store deformation
function GetCarDeformationAtPos(vehicle, x, y, z) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (positive integer) pValue lock status
function GetCarDoorLockStatus(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (float) pValue variable to store x
function GetCarForwardX(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (float) pValue variable to store y
function GetCarForwardY(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) car handle
---@return number (float) pValue variable to store heading
function GetCarHeading(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (positive integer) pValue variable to store health
function GetCarHealth(vehicle) end

---
---Gets model from a vehicle.
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (positive integer) pValue variable to store model
function GetCarModel(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (float) pValue variable to store pitch
function GetCarPitch(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (float) pValue variable to store roll
function GetCarRoll(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (float) pValue variable to store speed
function GetCarSpeed(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param unknownFalse boolean unknown (false suggested)
---@return any (Vector3, vector3 pVector variable to store speed vector
function GetCarSpeedVector(vehicle, unknownFalse) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (float) pValue variable to store upright value
function GetCarUprightValue(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param seatIndex number (positive integer) seat index
---@return number (Ped) pPed variable to store ped id
function GetCharInCarPassengerSeat(vehicle, seatIndex) end

---
---This function returns the closest car in the specified radius, at the specified coordinates.
---
---Note: Parameter 6, when set to 69 or 71, appears to also return emergency vehicles such as police, ambulance, and firetruck. Also: Parameter 5 is model hash of vehicle, and if it typed in (not nil) - search only vehicles with this hash (Ex.: GET\_CLOSEST\_CAR(x, y, z, 20.000, 3338918751, 70, &closest\_car) - returns "yeeeelow car" if it in range of Parameter 4)
---
---
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param radius number (float) Radius
---@param unknown0_0 number (positive integer) Unknown (usually 0)
---@param unknown1_70 number (positive integer) Unknown (usually 70)
---@return number (integer) id of the closest car of the specified radius/coordinates.
function GetClosestCar(x, y, z, radius, unknown0_0, unknown1_70) end

---
---Gets the car node closest to the specified position, and stores the position of the node in the variables pointed to by P4, P5 and P6.
---
---
---@param x number (float) X coordinate
---@param y number (float) Y coordinate
---@param z number (float) Z coordinate
---@return boolean success?
---@return number (float) pResX X coordinate of closest node
---@return number (float) pResY Y coordinate of closest node
---@return number (float) pResZ Z coordinate of closest node
function GetClosestCarNode(x, y, z) end

---
---Gets the car node closest to the specified position, and stores the position and heading of the node in the variables pointed to by P4, P5, P6 and P7.
---
---
---@param x number (float) X coordinate
---@param y number (float) Y coordinate
---@param z number (float) Z coordinate
---@return boolean success?
---@return number (float) pResX X coordinate of closest node
---@return number (float) pResY Y coordinate of closest node
---@return number (float) pResZ Z coordinate of closest node
---@return number (float) pHeading Heading of closest node
function GetClosestCarNodeWithHeading(x, y, z) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return boolean
---@return number (float) pResX
---@return number (float) pResY
---@return number (float) pResZ
function GetClosestMajorCarNode(x, y, z) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param nodeNum number (positive integer)
---@return boolean
---@return number (float) pResX
---@return number (float) pResY
---@return number (float) pResZ
---@return number (float) pHeading
function GetNthClosestCarNodeWithHeading(x, y, z, nodeNum) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param nodeNum number (positive integer)
---@param areaId number (positive integer)
---@return boolean
---@return number (float) pResX
---@return number (float) pResY
---@return number (float) pResZ
---@return number (float) pHeading
---@return number (positive integer) pUnknownMaybeAreaId
function GetNthClosestCarNodeWithHeadingOnIsland(x, y, z, nodeNum, areaId) end

---
---No description (
---
---
---@param vehicle number (Vehicle) dead vehicle handle
---@return number (float) pX variable to store x
---@return number (float) pY variable to store y
---@return number (float) pZ variable to store z
function GetDeadCarCoordinates(vehicle) end

---
---This native gets angle of vehicle`s door and store it in parameter 3. For example: GET\_DOOR\_ANGLE\_RATIO( myCar, 5, &FloatAngle ) - will get your trunk door angle.
---
---
---@param vehicle number (Vehicle) Vehicle handler
---@param door number (positive integer) Door`s ID
---@return number (float) pAngleRatio handler of door angle
function GetDoorAngleRatio(vehicle, door) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (Ped) pPed variable to store ped id
function GetDriverOfCar(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (float) engine health
function GetEngineHealth(vehicle) end

---
---This function will get the 1st and the 2nd specular color ID of the specified vehicle, and store them to variables.
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (ColourIndex) pColour1 variable to store 1st specular color ID
---@return number (ColourIndex) pColour2 variable to store 2nd specular color ID
function GetExtraCarColours(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknownTrue1 boolean
---@param unknownTrue2 boolean
---@return number (float)
function GetHeightOfVehicle(vehicle, x, y, z, unknownTrue1, unknownTrue2) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return number (positive integer) pKey
function GetKeyForCarInRoom(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return number (positive integer) pMax
function GetMaximumNumberOfPassengers(vehicle) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@return number (Vehicle) pVehicle
function GetNearestCableCar(x, y, z, radius) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return number (positive integer) pNumColours
function GetNumCarColours(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return number (positive integer) pNumPassengers variable to store passengers
function GetNumberOfPassengers(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return number (float) pOffX
---@return number (float) pOffY
---@return number (float) pOffZ
function GetOffsetFromCarGivenWorldCoords(vehicle, x, y, z) end

---
---This function will get the x,y,z coordinates of the car in P1, with the offsets in P2 P3 and P4, and store them to variables.
---
---
---@param vehicle number (Vehicle) car handle
---@param x number (float) offset X value
---@param y number (float) offset Y value
---@param z number (float) offset Z value
---@return number (float) pOffX variable to store X pos
---@return number (float) pOffY variable to store Y pos
---@return number (float) pOffZ variable to store Z pos
function GetOffsetFromCarInWorldCoords(vehicle, x, y, z) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return number (float)
function GetPetrolTankHealth(vehicle) end

---
---No description (
---
---
---@param MustIncludeSpecialModels boolean
---@param unknown_1 any (unknown)
---@param unknown_2 any (unknown)
---@return number (positive integer) pHash
function GetRandomCarModelInMemory(MustIncludeSpecialModels, unknown_1, unknown_2) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param pIntensity any (float*)
---@return nil
function GetVehicleDirtLevel(vehicle, pIntensity) end

---
---No description (
---
---
---@param vehicle number (Vehicle) Car handle.
---@param otherCar number (Vehicle) Second car handle.
---@return boolean Returns true if the first car has been damaged by the second car.
function HasCarBeenDamagedByCar(vehicle, otherCar) end

---
---No description (
---
---
---@param vehicle number (Vehicle) Car handle.
---@param ped number (Ped) Char handle.
---@return boolean Returns true if the specified car has been damaged by the specified character.
function HasCarBeenDamagedByChar(vehicle, ped) end

---
---No description (
---
---
---@param vehicle number (Vehicle) Car handle.
---@param weapon number (positive integer) Weapon handle.
---@return boolean Returns true if the specified car has been damaged by the specified weapon.
function HasCarBeenDamagedByWeapon(vehicle, weapon) end

---
---No description (
---
---
---@param vehicle number (Vehicle) Car handle.
---@return boolean Returns true if the car has been resprayed at a Pay 'n' Spray since the function was last called.
function HasCarBeenResprayed(vehicle) end

---
---The results of this function are either unknown or untested.
---
---
---@param vehicle number (Vehicle) Vehicle Handle
---@return boolean
function IsBigVehicle(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarAMissionCar(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarAttached(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarDead(vehicle) end

---
---This function returns true if P1 car door is open. Otherwise returns false.
---Door`s IDï¿½:
---0 - Left front door
---1 - Right front door
---2 - Left rear door
---3 - Right rear door
---4 - Hood
---5 - Trunk
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param door number (positive integer) Door's ID
---@return boolean true or false
function IsCarDoorDamaged(vehicle, door) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param door number (positive integer)
---@return boolean
function IsCarDoorFullyOpen(vehicle, door) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarInAirProper(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param x1 number (float)
---@param y1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param unknownFalse boolean
---@return boolean
function IsCarInArea2d(vehicle, x1, y1, x2, y2, unknownFalse) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param z2 number (float)
---@param unknownFalse number (positive integer)
---@return boolean
function IsCarInArea3d(vehicle, x1, y1, z1, x2, y2, z2, unknownFalse) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarInWater(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param model number (positive integer)
---@return boolean
function IsCarModel(vehicle, model) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarOnFire(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarOnScreen(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param seatIndex number (positive integer) seat index
---@return boolean returns if the seat is free or not
function IsCarPassengerSeatFree(vehicle, seatIndex) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarSirenOn(vehicle) end

---
---The results of this function are either unknown or untested.
---
---
---@param vehicle number (Vehicle) Car Handle
---@return boolean
function IsCarStopped(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarStoppedAtTrafficLights(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarStuckOnRoof(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param otherCar number (Vehicle)
---@return boolean
function IsCarTouchingCar(vehicle, otherCar) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param tyre number (positive integer)
---@return boolean
function IsCarTyreBurst(vehicle, tyre) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarUpright(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarUpsidedown(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsCarWaitingForWorldCollision(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return boolean
function IsVehDriveable(vehicle) end

---
---Gets whether the specified vehicle window is intact.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param window number (positive integer) Window ID
---@return boolean Whether the specified window is intact.
function IsVehWindowIntact(vehicle, window) end

---
---This native function returns true if the vehicle extra of specified ID is turned on for the specified vehicle.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param extra number (positive integer) Extra ID
---@return boolean true if extra is turned on, otherwise false
function IsVehicleExtraTurnedOn(vehicle, extra) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return boolean return if vehicle is on all wheels or not
function IsVehicleOnAllWheels(vehicle) end

---
---Knocks ped off of bike. To use this, you would want to check if the vehicle you are calling this on is a bike (using GET\_CAR\_MODEL & IS\_THIS\_MODEL\_A\_BIKE), then check if there is a ped on the bike (using GET\_DRIVER\_OF\_CAR (checking if it exists) & IS\_CAR\_PASSENGER\_SEAT\_FREE).
---
---
---@param vehicle number (Vehicle) vehicle handle
---@return nil
function KnockPedOffBike(vehicle) end

---
---This sets the lock status of car doors.
---etc.
---NOTE: These may actually be bit flags instead, and the descriptions above may be combinations of flags!
---
---
---@param vehicle number (Vehicle) car handle
---@param value number (positive integer) flag
---@return nil
function LockCarDoors(vehicle, value) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param convoyCar boolean
---@return nil
function MarkCarAsConvoyCar(vehicle, convoyCar) end

---
---The game will delete the vehicle when appropiate (i.e. no player is in proximity). Will work with any vehicle, not just cars.
---
---
---@return number (Vehicle) pVehicle Vehicle Handle
function MarkCarAsNoLongerNeeded() end

---
---This function open a door of the specified vehicle. To close a door call SHUT\_CAR\_DOOR.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param door number (positive integer) Door's ID
---@return nil
function OpenCarDoor(vehicle, door) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return nil
function PopCarBoot(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return nil
function RemoveStuckCarCheck(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return nil
function RemoveUpsidedownCarCheck(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param pX number (float)
---@param pY number (float)
---@param pZ number (float)
---@return nil
function SetCarCoordinates(vehicle, pX, pY, pZ) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param Value number (positive integer)
---@return nil
function SetCarHealth(vehicle, Value) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param value number (float)
---@return nil
function SetPetrolTankHealth(vehicle, value) end

---
---This function enable or disable the damage counter of the specified vehicle. To enable or disable the visible damage call SET\_CAR\_CAN\_BE\_VISIBLY\_DAMAGED.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param value boolean False to disable damage or true to enable damage
---@return nil
function SetCarCanBeDamaged(vehicle, value) end

---
---This function enable or disable the visible damage of the specified vehicle. To enable or disable the damage counter call SET CAR CAN BE DAMAGED.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param value boolean False to disable visible damage or true to enable visible damage
---@return nil
function SetCarCanBeVisiblyDamaged(vehicle, value) end

---
---This function sets the car current speed (only forward).
---
---
---@param vehicle number (Vehicle) Vehicle handler
---@param speed number (float) Speed
---@return nil
function SetCarForwardSpeed(vehicle, speed) end

---
---This function sets the rotation of the vehicle.
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param dir number (float) angle of rotation
---@return nil
function SetCarHeading(vehicle, dir) end

---
---This function tries to put the vehicle on the ground properly
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@return any Was able to set car on ground properly?
function SetCarOnGroundProperly(vehicle) end

---
---No description (
---
---
---@param vehicle number (Vehicle) vehicle handle
---@param bulletProof boolean bullet-proof true/false
---@param fireProof boolean fire-proof true/false
---@param explosionProof boolean explosion-proof true/false
---@param collisionProof boolean collision-proof true/false
---@param meleeProof boolean melee-proof true/false
---@return nil
function SetCarProofs(vehicle, bulletProof, fireProof, explosionProof, collisionProof, meleeProof) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param strong boolean
---@return nil
function SetCarStrong(vehicle, strong) end

---
---This function sets the specified car visibility.
---
---
---@param vehicle number (Vehicle) Car handle.
---@param value boolean true/false
---@return nil
function SetCarVisible(vehicle, value) end

---
---This function change the specular colors of the specified vehicle.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param colour1 number (ColourIndex) 1st specular color ID
---@param colour2 number (ColourIndex) 2nd specular color ID
---@return nil
function SetExtraCarColours(vehicle, colour1, colour2) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@param health number (float)
---@return nil
function SetEngineHealth(vehicle, health) end

---
---This function turn on or off the hazard lights of the specified vehicle.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param on boolean False to turn off the hazard lights or True to turn on the hazard lights
---@return nil
function SetVehHazardlights(vehicle, on) end

---
---This function changes the dirt level of the specified vehicle. You can exceed the maximum and briefly see the change but the game will prevent the car from being dirtier than the maximum. To clean the vehicle, set the level to 0.0 or call WASH\_VEHICLE\_TEXTURES with 255 in 2nd parameter.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param intensity number (float) Dirt level (0.0 is the minimum, 15.9 is the maximum)
---@return nil
function SetVehicleDirtLevel(vehicle, intensity) end

---
---This function close a door of the specified vehicle. To open a door call OPEN CAR DOOR.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param door number (positive integer) Door's ID
---@return nil
function ShutCarDoor(vehicle, door) end

---
---Sounds the car horn for the specified amount of milliseconds.
---If the vehicle has no driver, nothing will happen.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param duration number (positive integer) Duration
---@return nil
function SoundCarHorn(vehicle, duration) end

---
---This function remove the dirt on the texture of the specified vehicle.
---
---
---@param vehicle number (Vehicle) Vehicle handle
---@param intensity number (positive integer) Unknown (transparency of the dirt?)
---@return nil
function WashVehicleTextures(vehicle, intensity) end

---
---No description (
---
---
---@param unknown1 number (positive integer) train type?
---@param x number (float) X position
---@param y number (float) Y position
---@param z number (float) Z position
---@param unknown2 boolean Train direction (1 or 0)
---@return number (Train) pTrain Variable to store train handle
function CreateMissionTrain(unknown1, x, y, z, unknown2) end

---
---No description (
---
---
---@return number (Train) pTrain
function DeleteMissionTrain() end

---
---No description (
---
---
---@param train number (Train)
---@return number (positive integer)
function GetCurrentStationForTrain(train) end

---
---No description (
---
---
---@param train number (Train)
---@return number (positive integer)
function GetNextStationForTrain(train) end

---
---No description (
---
---
---@param train number (Train)
---@param station number (positive integer)
---@return string
function GetStationName(train, station) end

---
---No description (
---
---
---@param train number (Train)
---@return nil
function MarkMissionTrainAsNoLongerNeeded(train) end

---
---No description (
---
---
---@return nil
function MarkMissionTrainsAsNoLongerNeeded() end

---
---Adds an object to the interior room denoted by the key.
---
---
---@param obj number (Object) Object Id
---@param roomKey number (positive integer) Interior Room Key
---@return nil
function AddObjectToInteriorRoomByKey(obj, roomKey) end

---
---Applies force to an object.
---P10 IsForceDirectionReletive specifies if the force direction is relative to direction object is facing (true), or static world direction (false).
---
---
---@param obj number (Object) object Id
---@param uk0_3 number (positive integer) Unknown, suggested: true
---@param pX number (float) X Force
---@param pY number (float) Y Force
---@param pZ number (float) Z Force
---@param spinX number (float) X Angle
---@param spinY number (float) Y Angle
---@param spinZ number (float) Z Angle
---@param uk4_0 number (positive integer) Unknown, suggested: true
---@param uk5_1 number (positive integer) IsForceDirectionReletive
---@param uk6_1 number (positive integer) Unknown, suggested: true
---@param uk7_1 number (positive integer) Unknown, suggested: true
---@return nil
function ApplyForceToObject(obj, uk0_3, pX, pY, pZ, spinX, spinY, spinZ, uk4_0, uk5_1, uk6_1, uk7_1) end

---
---This function attaches an object to a car.
---
---
---@param obj number (Object) object handle
---@param v number (Vehicle) car handle
---@param unknown0_0 number (positive integer) Unknown (Always 0?)
---@param pX number (float) X Offset
---@param pY number (float) Y Offset
---@param pZ number (float) Z Offset
---@param rX number (float) RotoOffset X
---@param rY number (float) RotoOffset Y
---@param rZ number (float) RotoOffset Z
---@return nil
function AttachObjectToCar(obj, v, unknown0_0, pX, pY, pZ, rX, rY, rZ) end

---
---This function attaches an object to the ped.
---
---
---@param obj number (Object) object handle
---@param c number (Ped) ped handle
---@param bone number (positive integer) Bone ID
---@param pX number (float) X Offset
---@param pY number (float) Y Offset
---@param pZ number (float) Z Offset
---@param rX number (float) RotoOffset X
---@param rY number (float) RotoOffset Y
---@param rZ number (float) RotoOffset Z
---@param unknown1_0 number (positive integer) Unknown (Always 0?)
---@return nil
function AttachObjectToPed(obj, c, bone, pX, pY, pZ, rX, rY, rZ, unknown1_0) end

---
---No description (
---
---
---@param obj number (Object)
---@return nil
function ClearObjectLastDamageEntity(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return nil
function ClearRoomForObject(obj) end

---
---No description (
---
---
---@param model number (positive integer) object model (appears to be hashed)
---@param x number (float) X pos
---@param y number (float) Y pos
---@param z number (float) Z pos
---@param unknownTrue boolean unknown (always 1?)
---@return number (Object) pObj variable to store object handle
function CreateObject(model, x, y, z, unknownTrue) end

---
---No description (
---
---
---@param model number (positive integer)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknownTrue boolean
---@return number (Object) pObj
function CreateObjectNoOffset(model, x, y, z, unknownTrue) end

---
---No description (
---
---
---@return number (Object) pObj object handle
function DeleteObject() end

---
---This function detaches the object from its host.
---
---
---@param obj number (Object) object handle
---@param unknown boolean Boolean (always 1?)
---@return nil
function DetachObject(obj, unknown) end

---
---Returns a boolean indicating if the specified object handle is allocated in the game.
---
---
---@param obj number (Object) object handle
---@return boolean true if the object handle is allocated
function DoesObjectExist(obj) end

---
---No description (
---
---
---@param obj number (Object) object handle
---@return boolean returns if the objects has physics or not
function DoesObjectHavePhysics(obj) end

---
---No description (
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param radius number (float) radius
---@param model number (positive integer) model (hash)
---@return boolean returns if an object with the specified model exists around the specified coordinates
function DoesObjectOfTypeExistAtCoords(x, y, z, radius, model) end

---
---No description (
---
---
---@param obj number (Object) object handle
---@return nil
function ExtinguishObjectFire(obj) end

---
---No description (
---
---
---@param obj number (Object) Object handle.
---@param frozen boolean true/false
---@return nil
function FreezeObjectPosition(obj, frozen) end

---
---No description (
---
---
---@param obj number (Object) object handle
---@return number (integer) vehicle that the object is attached to
function GetCarObjectIsAttachedTo(obj) end

---
---This function will get the x,y,z coordinates of the object in Parameter 1, and store them to variables (p2,p3,p4).
---
---
---@param obj number (Object) object handle
---@return number (float) pX variable to store X pos
---@return number (float) pY variable to store Y pos
---@return number (float) pZ variable to store Z pos
function GetObjectCoordinates(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@param unknown boolean
---@return number (float)
function GetObjectFragmentDamageHealth(obj, unknown) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (float) pHeading
function GetObjectHeading(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (float) pHealth
function GetObjectHealth(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (positive integer) pModel
function GetObjectModel(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
function GetObjectRotationVelocity(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (float) pSpeed
function GetObjectSpeed(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
function GetObjectVelocity(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return number (float) pOffX
---@return number (float) pOffY
---@return number (float) pOffZ
function GetOffsetFromObjectInWorldCoords(obj, x, y, z) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (integer)
function GetPedObjectIsAttachedTo(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function HasObjectBeenDamaged(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@param vehicle number (Vehicle)
---@return boolean
function HasObjectBeenDamagedByCar(obj, vehicle) end

---
---No description (
---
---
---@param obj number (Object)
---@param ped number (Ped)
---@return boolean
function HasObjectBeenDamagedByChar(obj, ped) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function HasObjectBeenUprooted(obj) end

---
---Gets whether the object has collided with anything. To use this function, the object must be recording collisions. Use SET\_OBJECT\_RECORDS\_COLLISIONS to enable collision recording for an object.
---
---
---@param obj number (Object) Object handle
---@return boolean Whether the object has collided with anything or not
function HasObjectCollidedWithAnything(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function HasPoolObjectCollidedWithCushion(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@param otherObj number (Object)
---@return boolean
function HasPoolObjectCollidedWithObject(obj, otherObj) end

---
---No description (
---
---
---@param obj number (Object) object handle
---@return boolean true / false
function IsObjectAttached(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function IsObjectInWater(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function IsObjectOnFire(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function IsObjectOnScreen(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function IsObjectStatic(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@param angle number (float)
---@return boolean
function IsObjectUpright(obj, angle) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function IsObjectWithinBrainActivationRange(obj) end

---
---No description (
---
---
---@return nil
function LoadAllObjectsNow() end

---
---No description (
---
---
---@param obj number (Object)
---@param targettable boolean
---@return nil
function MakeObjectTargettable(obj, targettable) end

---
---No description (
---
---
---@return number (Object) pObj
function MarkObjectAsNoLongerNeeded() end

---
---No description (
---
---
---@param obj number (Object)
---@param value boolean
---@return nil
function SetObjectCollision(obj, value) end

---
---No description (
---
---
---@param obj number (Object)
---@param pX number (float)
---@param pY number (float)
---@param pZ number (float)
---@return nil
function SetObjectCoordinates(obj, pX, pY, pZ) end

---
---No description (
---
---
---@param obj number (Object)
---@param value number (float)
---@return nil
function SetObjectHeading(obj, value) end

---
---Sets the visibility of the object.
---
---
---@param obj number (Object) Object handle
---@param value boolean 0 - invisible, 1 - visible
---@return nil
function SetObjectVisible(obj, value) end

---
---No description (
---
---
---@param obj number (Object)
---@return any
function StartObjectFire(obj) end

---
---Returns true if the model specified by the model hash has been loaded.
---
---
---@param model number (positive integer) Model Hash
---@return boolean True if model has loaded
function HasModelLoaded(model) end

---
---Loads a model specified by the model hash.
---Code example:
---
---
---@param model number (positive integer) Model Hash
---@return nil
function RequestModel(model) end

---
---No description (
---
---
---@return number (positive integer) pModel
function GetCurrentBasicCopModel() end

---
---No description (
---
---
---@return number (positive integer) pModel
function GetCurrentBasicPoliceCarModel() end

---
---No description (
---
---
---@return number (positive integer) pModel
function GetCurrentCopModel() end

---
---No description (
---
---
---@return number (positive integer) pModel
function GetCurrentPoliceCarModel() end

---
---No description (
---
---
---@return number (positive integer) pModel
function GetCurrentTaxiCarModel() end

---
---No description (
---
---
---@param model number (positive integer) model
---@return string display name
function GetDisplayNameFromVehicleModel(model) end

---
---No description (
---
---
---@param model number (positive integer)
---@return any (Vector3) pMinVector
---@return any (Vector3) pMaxVector
function GetModelDimensions(model) end

---
---This debug function was cut off final build, so it always returns string "Debug command not in final build" as result.
---
---
---@param model number (positive integer)
---@return string "Debug command not in final build"
function GetModelNameForDebug(model) end

---
---No description (
---
---
---@param model number (positive integer) Model handle
---@return boolean Returns true if the given model is a bike model.
function IsThisModelABike(model) end

---
---No description (
---
---
---@param model number (positive integer) Model handle
---@return boolean Returns true if the given model is a boat model.
function IsThisModelABoat(model) end

---
---No description (
---
---
---@param model number (positive integer) Model handle
---@return boolean Returns true if the given model is a car model.
function IsThisModelACar(model) end

---
---No description (
---
---
---@param model number (positive integer) Model handle
---@return boolean Returns true if the given model is a helicopter model.
function IsThisModelAHeli(model) end

---
---No description (
---
---
---@param model number (positive integer) Model handle
---@return boolean Returns true if the given model is a ped model.
function IsThisModelAPed(model) end

---
---No description (
---
---
---@param model number (positive integer) Model handle
---@return boolean Returns true if the given model is an airplane model.
function IsThisModelAPlane(model) end

---
---No description (
---
---
---@param model number (positive integer) Model handle
---@return boolean Returns true if the given model is a train model.
function IsThisModelATrain(model) end

---
---No description (
---
---
---@param model number (positive integer) Model handle
---@return boolean Returns true if the given model is a vehicle model.
function IsThisModelAVehicle(model) end

---
---Decrements reference counter on the model specified by model hash so that it can be freed when there are no more references to it.
---
---
---@param model number (positive integer) model hash
---@return nil
function MarkModelAsNoLongerNeeded(model) end

---
---No description (
---
---
---@param interior number (Interior) Interior Id
---@param unknownTrue boolean Flag to turn activation on and off
---@return nil
function ActivateInterior(interior, unknownTrue) end

---
---No description (
---
---
---@param vehicle number (Vehicle)
---@return number (Interior) pInterior
function GetInteriorFromCar(vehicle) end

---
---No description (
---
---
---@param ped number (Ped)
---@return number (Interior) pInterior
function GetInteriorFromChar(ped) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return number (Interior) pInterior
function GetInteriorAtCoords(x, y, z) end

---
---No description (
---
---
---@param interior number (Interior)
---@return number (float) pHeading
function GetInteriorHeading(interior) end

---
---No description (
---
---
---@param interior number (Interior)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return number (float) pOffset
function GetOffsetFromInteriorInWorldCoords(interior, x, y, z) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (positive integer) pRoomKey
function GetRoomKeyFromObject(obj) end

---
---No description (
---
---
---@param model number (positive integer)
---@param interiorName string
---@return nil
function RequestInteriorModels(model, interiorName) end

---
---Sets which action should occur according to the event on the following parameters.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param dm number (DecisionMaker) Decision Maker ID
---@param eventid number (positive integer) Event ID
---@param responseid number (positive integer) Task ID
---@param param1 number (float) Respect
---@param param2 number (float) Hate
---@param param3 number (float) Like
---@param param4 number (float) Dislike
---@param unknown0_1 number (positive integer) In car
---@param unknown1_1 number (positive integer) On foot
---@return nil
function AddCharDecisionMakerEventResponse(dm, eventid, responseid, param1, param2, param3, param4, unknown0_1, unknown1_1) end

---
---Clone of ADD\_CHAR\_DECISION\_MAKER\_EVENT\_RESPONSE
---
---
---@param dm number (DecisionMaker)
---@param eventid number (positive integer)
---@param responseid number (positive integer)
---@param param1 number (float)
---@param param2 number (float)
---@param param3 number (float)
---@param param4 number (float)
---@param unknown0_1 number (positive integer)
---@param unknown1_1 number (positive integer)
---@return nil
function AddCombatDecisionMakerEventResponse(dm, eventid, responseid, param1, param2, param3, param4, unknown0_1, unknown1_1) end

---
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param dm number (DecisionMaker) Unknown
---@param eventid number (positive integer) Unknown
---@param responseid number (positive integer) Unknown
---@param param1 number (float) X Coordinate
---@param param2 number (float) Y Coordinate
---@param param3 number (float) Z Coordinate
---@param param4 number (float)
---@param unknown0_1 number (positive integer)
---@param unknown1_1 number (positive integer)
---@return nil
function AddGroupDecisionMakerEventResponse(dm, eventid, responseid, param1, param2, param3, param4, unknown0_1, unknown1_1) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param eventid number (positive integer)
---@return nil
function ClearCharDecisionMakerEventResponse(dm, eventid) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param eventid number (positive integer)
---@return nil
function ClearCombatDecisionMakerEventResponse(dm, eventid) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param eventid number (positive integer)
---@return nil
function ClearGroupDecisionMakerEventResponse(dm, eventid) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function CopyCharDecisionMaker(type) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function CopyCombatDecisionMaker(type) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function CopyGroupCharDecisionMaker(type) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function CopyGroupCombatDecisionMaker(type) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function CopySharedCharDecisionMaker(type) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function CopySharedCombatDecisionMaker(type) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@return boolean
function DoesDecisionMakerExist(dm) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function LoadCharDecisionMaker(type) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function LoadCombatDecisionMaker(type) end

---
---This native function does nothing. GTA 4 has several native functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could be more than 0.
---
---
---@param type number (positive integer)
---@return number (DecisionMaker) pDM
function LoadGroupDecisionMaker(type) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@return nil
function RemoveDecisionMaker(dm) end

---
---No description (
---
---
---@param ped number (Ped)
---@param dm number (DecisionMaker)
---@return nil
function SetCharDecisionMaker(ped, dm) end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function SetCharDecisionMakerToDefault(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param dm number (DecisionMaker)
---@return nil
function SetCombatDecisionMaker(ped, dm) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value boolean
---@return nil
function SetDecisionMakerAttributeCanChangeTarget(dm, value) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value number (positive integer)
---@return nil
function SetDecisionMakerAttributeCaution(dm, value) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value number (positive integer)
---@return nil
function SetDecisionMakerAttributeFireRate(dm, value) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value number (positive integer)
---@return nil
function SetDecisionMakerAttributeLowHealth(dm, value) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value number (positive integer)
---@return nil
function SetDecisionMakerAttributeMovementStyle(dm, value) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value number (positive integer)
---@return nil
function SetDecisionMakerAttributeNavigationStyle(dm, value) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value number (positive integer)
---@return nil
function SetDecisionMakerAttributeRetreatingBehaviour(dm, value) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value number (positive integer)
---@return nil
function SetDecisionMakerAttributeSightRange(dm, value) end

---
---No description (
---
---
---@param dm number (DecisionMaker)
---@param value number (positive integer)
---@return nil
function SetDecisionMakerAttributeStandingStyle(dm, value) end

---
---The results of this function are either unknown or untested.
---
---
---@param dm number (DecisionMaker) Ped Handle
---@param value number (positive integer) ? (1)
---@return nil
function SetDecisionMakerAttributeTargetInjuredReaction(dm, value) end

---
---The results of this function are either unknown or untested.
---
---
---@param dm number (DecisionMaker) Ped Handle
---@param value number (positive integer) ? (1)
---@return nil
function SetDecisionMakerAttributeTargetLossResponse(dm, value) end

---
---The results of this function are either unknown or untested.
---
---
---@param dm number (DecisionMaker) Ped Handle
---@param value number (positive integer) ? (2)
---@return nil
function SetDecisionMakerAttributeTeamwork(dm, value) end

---
---The results of this function are either unknown or untested.
---
---
---@param dm number (DecisionMaker) Ped Handle
---@param value number (positive integer) Accuracy
---@return nil
function SetDecisionMakerAttributeWeaponAccuracy(dm, value) end

---
---No description (
---
---
---@param group number (Group)
---@param dm number (DecisionMaker)
---@return nil
function SetGroupCharDecisionMaker(group, dm) end

---
---No description (
---
---
---@param group number (Group)
---@param dm number (DecisionMaker)
---@return nil
function SetGroupCombatDecisionMaker(group, dm) end

---
---This native function does nothing. GTA 4 has several native functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could be more than 0.
---
---
---@param group number (Group)
---@param dm number (DecisionMaker)
---@return nil
function SetGroupDecisionMaker(group, dm) end

---
---No description (
---
---
---@param vehicle number (Vehicle) Vehicle Id
---@return number (Blip) pBlip Variable to store the Blip Handle
function AddBlipForCar(vehicle) end

---
---No description (
---
---
---@param ped number (Ped) Actor Id
---@return number (Blip) pBlip Variable to store Blip Handle in
function AddBlipForChar(ped) end

---
---No description (
---
---
---@param x number (float) X value for Blip
---@param y number (float) Y value for Blip
---@param z number (float) Z value for Blip
---@return number (Blip) pBlip Variable to store Blip Handle in
function AddBlipForContact(x, y, z) end

---
---No description (
---
---
---@param x number (float) X coordinate
---@param y number (float) Y coordinate
---@param z number (float) Z coordinate
---@return number (Blip) pBlip Variable to store Blip Handle in
function AddBlipForCoord(x, y, z) end

---
---No description (
---
---
---@param obj number (Object) Object Id
---@return number (Blip) pBlip Variable to store Blip Handle in
function AddBlipForObject(obj) end

---
---No description (
---
---
---@param pickup number (Pickup) Pickup Id
---@return number (Blip) pBlip Variable to store Blip Handle in
function AddBlipForPickup(pickup) end

---
---Adds a simple blip on the map corresponding to the pickups position.
---
---
---@param pickup number (Pickup) Pickup Id
---@return nil
function AddSimpleBlipForPickup(pickup) end

---
---No description (
---
---
---@param blip number (Blip)
---@param alpha number (integer)
---@return nil
function ChangeBlipAlpha(blip, alpha) end

---
---This function recolors the blip in the first parameter with the color in the second parameter.
---
---
---
---@param blip number (Blip) blip handle
---@param colour number (ColourIndex) color
---@return nil
function ChangeBlipColour(blip, colour) end

---
---Changes how a blip is displayed in the radar, the map and the world.
---These values were infered doing in-game tests. The image to the right shows how some blips are drawn only on the radar vs the radar AND the map, while the images below show how some blips are drawn on the radar vs the radar AND the world. Pay attention to the numbers shown in the radar next to the contact\_blips (colored in dark yellow). On the first image these numbers represent the index of each blip in blip\_array[] and their blip\_display value. On the second image those numbers represent only their index in blip\_array[] while their blip\_display value is always equal to 4. Note how the blips are displayed on the second image relative to the first one.
---
---The blips were created in a for loop that also changed their blip\_display value:
---
---
---@param blip number (Blip) blip_handle
---@param display number (positive integer) blip_display
---@return nil
function ChangeBlipDisplay(blip, display) end

---
---This function changes blip's name which is displayed while covering it with cursor on the map.
---
---
---@param blip number (Blip) Blip ID
---@param blipName string Name
---@return nil
function ChangeBlipNameFromAscii(blip, blipName) end

---
---No description (
---
---
---@param blip number (Blip)
---@param gxtName string
---@return nil
function ChangeBlipNameFromTextFile(blip, gxtName) end

---
---No description (
---
---
---@param blip number (Blip)
---@param priority number (positive integer)
---@return nil
function ChangeBlipPriority(blip, priority) end

---
---This function changes blip's scale (1.0 = default size).
---
---
---@param blip number (Blip) Blip ID
---@param scale number (float) Scale
---@return nil
function ChangeBlipScale(blip, scale) end

---
---This function changes the sprite of a blip created with functions ADD\_BLIP\_FOR... (ADD\_BLIP\_FOR\_CAR, ADD\_BLIP\_FOR\_CHAR, etc). For the full list of blip sprites see this page.
---
---
---@param blip number (Blip) blip handle
---@param sprite number (positive integer) blip spriteID
---@return nil
function ChangeBlipSprite(blip, sprite) end

---
---No description (
---
---
---@param blip number (Blip)
---@param unknownTrue boolean
---@return nil
function DimBlip(blip, unknownTrue) end

---
---Returns a boolean indicating if the specified blip handle is allocated in the game.
---
---
---@param blip number (Blip) blip handle
---@return boolean true if the blip handle is allocated
function DoesBlipExist(blip) end

---
---The results of this function are either unknown or untested.
---
---
---@param blip number (Blip) Blip
---@param on boolean On / Offï¿½?
---@return nil
function FlashBlip(blip, on) end

---
---No description (
---
---
---@param blip number (Blip)
---@param on boolean
---@return nil
function FlashBlipAlt(blip, on) end

---
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param blip number (Blip) Blip handle
---@return number (ColourIndex) pColour Variable to store blip's color in.
function GetBlipColour(blip) end

---
---No description (
---
---
---@param blip number (Blip) Blip handle
---@return any (Vector3, pointer pVector Variable to store vector containing blip's coords.
function GetBlipCoords(blip) end

---
---No description (
---
---
---@param blip number (Blip) blip handle
---@return number (positive integer) blip type
function GetBlipInfoIdType(blip) end

---
---No description (
---
---
---@param blip number (Blip) Blip handle
---@return number (integer) Handle of car blip's attached to.
function GetBlipInfoIdCarIndex(blip) end

---
---No description (
---
---
---@param blip number (Blip) blip handle
---@return number (positive integer)
function GetBlipInfoIdDisplay(blip) end

---
---No description (
---
---
---@param blip number (Blip) Blip handle
---@return number (integer) Object handle
function GetBlipInfoIdObjectIndex(blip) end

---
---No description (
---
---
---@param blip number (Blip) Blip handle
---@return number (integer) Handle of ped blip's attached to.
function GetBlipInfoIdPedIndex(blip) end

---
---No description (
---
---
---@param blip number (Blip) blip handle
---@return number (integer) pickup index
function GetBlipInfoIdPickupIndex(blip) end

---
---No description (
---
---
---@param blip number (Blip) blip handle
---@return string blip name
function GetBlipName(blip) end

---
---No description (
---
---
---@param blip number (Blip) blip handle
---@return number (positive integer) sprite
function GetBlipSprite(blip) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (integer)
function GetFirstBlipInfoId(type) end

---
---No description (
---
---
---@param type number (positive integer)
---@return number (integer)
function GetNextBlipInfoId(type) end

---
---No description (
---
---
---@param blip number (Blip)
---@return boolean
function IsBlipShortRange(blip) end

---
---No description (
---
---
---@param blip number (Blip)
---@return nil
function RemoveBlip(blip) end

---
---No description (
---
---
---@param blip number (Blip)
---@param value boolean
---@return nil
function SetBlipAsFriendly(blip, value) end

---
---This function forces a blip to be seen through the borders of the radar (just like mission/contact blips) when the second parameter is set to false.
---
---
---@param blip number (Blip) Blip handle
---@param value boolean true/false
---@return nil
function SetBlipAsShortRange(blip, value) end

---
---This function draws the path on the map and radar to a specified blip (like for a waypoint). Color of the route depends on color of blip.
---
---
---@param blip number (Blip) Blip ID
---@param value boolean 0=off/1=on
---@return nil
function SetRoute(blip, value) end

---
---Adds a pickup to the interior room denoted by its name.
---
---
---@param pickup number (Pickup) Pickup Id
---@param roomName string Interior Room Name
---@return nil
function AddPickupToInteriorRoomByName(pickup, roomName) end

---
---No description (
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param amount number (positive integer) amount
---@param unknownTrue boolean unknown (true suggested)
---@return number (Pickup) pPickup variable to store pickup
function CreateMoneyPickup(x, y, z, amount, unknownTrue) end

---
---No description (
---
---
---@param model number (positive integer) model
---@param pickupType number (positive integer) pickup type
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param unknownFalse boolean unknown (false suggested)
---@return number (Pickup) pPickup variable to store pickup
function CreatePickup(model, pickupType, x, y, z, unknownFalse) end

---
---No description (
---
---
---@param model number (positive integer) Model name
---@param pickupType number (positive integer) Pickup Type
---@param unknown number (positive integer) Ammo
---@param x number (float) X Position
---@param y number (float) Y Position
---@param z number (float) Z Position
---@param rX number (float) Rotate X Position
---@param rY number (float) Rotate Y Position
---@param rZ number (float) Rotate Z Position
---@return number (Pickup) pPickup Variable to store pickup Handle in
function CreatePickupRotate(model, pickupType, unknown, x, y, z, rX, rY, rZ) end

---
---No description (
---
---
---@param model number (positive integer) model
---@param pickupType number (positive integer) pickup type
---@param unknown number (positive integer) unknown
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@return number (Pickup) pPickup variable to store pickup
function CreatePickupWithAmmo(model, pickupType, unknown, x, y, z) end

---
---No description (
---
---
---@param pickup number (Pickup) pickup handle
---@return boolean
function DoesPickupExist(pickup) end

---
---No description (
---
---
---@param pickup number (Pickup)
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
function GetPickupCoordinates(pickup) end

---
---No description (
---
---
---@param pickup number (Pickup)
---@return boolean
function HasPickupBeenCollected(pickup) end

---
---No description (
---
---
---@param time number (positive integer)
---@return nil
function PickupsPassTime(time) end

---
---No description (
---
---
---@param pickup number (Pickup)
---@return nil
function RemovePickup(pickup) end

---
---No description (
---
---
---@return nil
function RemoveTemporaryRadarBlipsForPickups() end

---
---No description (
---
---
---@param value boolean
---@return nil
function RenderWeaponPickupsBigger(value) end

---
---The function checks if the specified camera has a clear line-of-sight towards the specified sphere.
---Environment (walls, buildings, ground) blocks the line of sight. Because the function has not been fully tested it is not known if objects, peds and vehicles block the line of sight.
---
---
---@param camera number (Camera) Camera Id
---@param pX number (float) Sphere centre X-Coordinate
---@param pY number (float) Sphere centre Y-Coordinate
---@param pZ number (float) Sphere centre Z-Coordinate
---@param radius number (float) Sphere radius
---@return boolean 0: can not be seen. 1: can be seen
function CamIsSphereVisible(camera, pX, pY, pZ, radius) end

---
---No description (
---
---
---@param camtype_usually14 number (positive integer) camera type
---@return number (Camera) camera variable to store camera handle
function CreateCam(camtype_usually14) end

---
---No description (
---
---
---@param camera number (Camera) camera handle
---@return nil
function DestroyCam(camera) end

---
---Returns a boolean indicating if the specified camera handle is allocated in the game.
---
---
---@param camera number (Camera) camera handle
---@return boolean true if the camera handle is allocated
function DoesCamExist(camera) end

---
---This function deactivates a specific camera (freezes it) if the second parameter is set to false.
---
---
---@param camera number (Camera) Cam ID
---@param value boolean Active status
---@return nil
function SetCamActive(camera, value) end

---
---No description (
---
---
---@param camera number (Camera) A handle for the camera
---@return number (float) fov
function GetCamFov(camera) end

---
---No description (
---
---
---@param camera number (Camera) camera handle
---@return number (float) pX variable to store x
---@return number (float) pY variable to store y
---@return number (float) pZ variable to store z
function GetCamPos(camera) end

---
---No description (
---
---
---@param camera number (Camera) camera handle
---@return number (float) angleX variable to store x angle
---@return number (float) angleY variable to store y angle
---@return number (float) angleZ variable to store z angle
function GetCamRot(camera) end

---
---This function gets the main game camera which is rotated around player's character with mouse.
---
---
---@return number (Camera) camera
function GetGameCam() end

---
---No description (
---
---
---@return number (Camera) camera
function GetGameCamChild() end

---
---No description (
---
---
---@param camera number (Camera)
---@return boolean
function IsCamActive(camera) end

---
---No description (
---
---
---@return boolean
function IsCamInterpolating() end

---
---No description (
---
---
---@param camera number (Camera)
---@return boolean
function IsCamPropagating(camera) end

---
---Set the camera behind the player.
---
---
---@param ped number (Ped) Ped Handle
---@return nil
function SetCamBehindPed(ped) end

---
---No description (
---
---
---@param camera number (Camera)
---@param fov number (float)
---@return nil
function SetCamFov(camera, fov) end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function SetCamInFrontOfPed(ped) end

---
---No description (
---
---
---@param camera number (Camera)
---@param pX number (float)
---@param pY number (float)
---@param pZ number (float)
---@return nil
function SetCamPos(camera, pX, pY, pZ) end

---
---This function switches the main game view to a specific camera. Only one camera can be active at the same time.
---
---
---@param camera number (Camera) Cam ID
---@param value boolean 0=off/1=on
---@return nil
function SetCamPropagate(camera, value) end

---
---No description (
---
---
---@param camera number (Camera)
---@param angleX number (float)
---@param angleY number (float)
---@param angleZ number (float)
---@return nil
function SetCamRot(camera, angleX, angleY, angleZ) end

---
---No description (
---
---
---@param camera number (Camera)
---@param ped number (Ped)
---@return nil
function SetCamTargetPed(camera, ped) end

---
---No description (
---
---
---@return boolean true/false
function NetworkIsGameRanked() end

---
---No description (
---
---
---@return boolean
function NetworkIsSessionStarted() end

---
---Returns true or false depending if all the navmesh regions are loaded.
---
---
---@return boolean Returns true or false depending if all the navmesh regions are loaded
function AreAllNavmeshRegionsLoaded() end

---
---No description (
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param radius number (float) radius
---@param unknown boolean unknown
---@return nil
function ClearArea(x, y, z, radius, unknown) end

---
---Clears the specified radius of cars.
---
---
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param radius number (float) Radius
---@return nil
function ClearAreaOfCars(x, y, z, radius) end

---
---Clears the specified radius out of chars.
---
---
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param radius number (float) Radius
---@return nil
function ClearAreaOfChars(x, y, z, radius) end

---
---Clears the specified radius out of cops.
---
---
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param radius number (float) Radius
---@return nil
function ClearAreaOfCops(x, y, z, radius) end

---
---Clears the specified radius out of objects.
---
---
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param radius number (float) Radius
---@return nil
function ClearAreaOfObjects(x, y, z, radius) end

---
---No description (
---
---
---@return nil
function ClearPedNonCreationArea() end

---
---No description (
---
---
---@return nil
function ClearPedNonRemovalArea() end

---
---No description (
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param radius number (float) radius
---@return nil
function ExtinguishFireAtPoint(x, y, z, radius) end

---
---No description (
---
---
---@param weather number (positive integer)
---@return nil
function ForceWeather(weather) end

---
---Activates weather change specified by index.
---
---
---@param weather number (positive integer) Weather index
---@return nil
function ForceWeatherNow(weather) end

---
---No description (
---
---
---@param wind number (float)
---@return nil
function ForceWind(wind) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@param model number (positive integer)
---@param frozen boolean
---@return nil
function FreezePositionOfClosestObjectOfType(x, y, z, radius, model, frozen) end

---
---This function returns the closest car in the specified radius, at the specified coordinates.
---
---Note: Parameter 6, when set to 69 or 71, appears to also return emergency vehicles such as police, ambulance, and firetruck. Also: Parameter 5 is model hash of vehicle, and if it typed in (not nil) - search only vehicles with this hash (Ex.: GET\_CLOSEST\_CAR(x, y, z, 20.000, 3338918751, 70, &closest\_car) - returns "yeeeelow car" if it in range of Parameter 4)
---
---
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param radius number (float) Radius
---@param unknownFalse boolean Unknown (usually 0)
---@param unknown70 number (positive integer) Unknown (usually 70)
---@return number (integer) id of the closest car of the specified radius/coordinates.
function GetClosestCar(x, y, z, radius, unknownFalse, unknown70) end

---
---Gets the closest character in the specified radius.
---
---
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param radius number (float) Radius
---@param unknown1 boolean Unknown (usually 0)
---@param unknown2 boolean Unknown (usually 70)
---@return boolean
---@return number (Ped) pPed Ped handle
function GetClosestChar(x, y, z, radius, unknown1, unknown2) end

---
---No description (
---
---
---@return number (positive integer) pWeather variable to store current weather
function GetCurrentWeather() end

---
---This function will get the ground z coordinate of the coordinates in x,y,z and store it to a variable.
---
---
---@param x number (float) X pos
---@param y number (float) Y pos
---@param z number (float) Z pos
---@return any
---@return number (float) pGroundZ variable to store ground z coordinate
function GetGroundZFor3dCoord(x, y, z) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@return number (positive integer)
function GetNumberOfFiresInRange(x, y, z, radius) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return number (float) pSafeX
---@return number (float) pSafeY
---@return number (float) pSafeZ
function GetSafePickupCoords(x, y, z) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknownTrue boolean
---@return boolean
---@return number (float) pSafeX
---@return number (float) pSafeY
---@return number (float) pSafeZ
function GetSafePositionForChar(x, y, z, unknownTrue) end

---
---No description (
---
---
---@param x number (float) X-Coordinates
---@param y number (float) Y-Coordinates
---@param z number (float) Z-Coordinates
---@param radius number (float) Radius
---@param objectModel number (positive integer) Object model
---@param ped number (Ped) Ped handle
---@return boolean
function HasClosestObjectOfTypeBeenDamagedByChar(x, y, z, radius, objectModel, ped) end

---
---No description (
---
---
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param z2 number (float)
---@param unknownFalse1 boolean
---@param unknownTrue boolean
---@param unknownFalse2 boolean
---@param unknownFalse3 boolean
---@param unknownFalse4 boolean
---@return boolean
function IsAreaOccupied(x1, y1, z1, x2, y2, z2, unknownFalse1, unknownTrue, unknownFalse2, unknownFalse3, unknownFalse4) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@param unknownTrue boolean
---@return boolean
function IsBulletInArea(x, y, z, radius, unknownTrue) end

---
---No description (
---
---
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@param z2 number (float)
---@param unknown boolean
---@return boolean
function IsBulletInBox(x1, y1, z1, x2, y2, z2, unknown) end

---
---No description (
---
---
---@param pX number (float)
---@param pY number (float)
---@param pZ number (float)
---@param sizeX number (float)
---@param sizeY number (float)
---@param sizeZ number (float)
---@return boolean
function IsPointObscuredByAMissionEntity(pX, pY, pZ, sizeX, sizeY, sizeZ) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function LoadScene(x, y, z) end

---
---No description (
---
---
---@param type number (positive integer)
---@return nil
function RemoveAllPickupsOfType(type) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function RequestCollisionAtPosn(x, y, z) end

---
---This function can remove all ambient planes, which are the ones moving in the airport and flying in the air.
---
---
---@param on boolean set (0=off / 1=on)
---@return nil
function SwitchAmbientPlanes(on) end

---
---No description (
---
---
---@param on boolean
---@return nil
function SwitchArrowAboveBlippedPickups(on) end

---
---No description (
---
---
---@param on boolean
---@return nil
function SwitchRandomBoats(on) end

---
---No description (
---
---
---@param on boolean
---@return nil
function SwitchRandomTrains(on) end

---
---No description (
---
---
---@param on boolean
---@return nil
function SwitchGarbageTrucks(on) end

---
---No description (
---
---
---@param on boolean
---@return nil
function SwitchMadDrivers(on) end

---
---No description (
---
---
---@param garageName string
---@return nil
function CloseGarage(garageName) end

---
---No description (
---
---
---@param garageName string
---@param vehicle number (Vehicle)
---@return boolean
function IsCarInGarageArea(garageName, vehicle) end

---
---No description (
---
---
---@param garageName string
---@return boolean
function IsGarageClosed(garageName) end

---
---No description (
---
---
---@param garageName string
---@return boolean
function IsGarageOpen(garageName) end

---
---Native open the garage door. Basically it used in missions.
---Code example:
---
---
---@param name string Garage name
---@return nil
function OpenGarage(name) end

---
---Draws GXT entry text.
---
---
---@param x number (float) x pos
---@param y number (float) y pos
---@param gxtName string gxt entry
---@return nil
function DisplayText(x, y, gxtName) end

---
---Draws a GXT entry text with two additional integer numbers.
---
---
---@param x number (float) x pos
---@param y number (float) y pos
---@param gxtName string gxt entry
---@param number1 number (integer) additional number 1
---@param number2 number (integer) additional number 2
---@return nil
function DisplayTextWith2Numbers(x, y, gxtName, number1, number2) end

---
---Draws a float number on the screen.
---Notes: parameter 1 and 2 must be numbers between 0.0 and 1.0 where 1.0 representes the screen width/height (e.g: To draw the text on the middle of the screen you should use parameter\_1 = 0.5, parameter\_2 = 0.5).
---
---
---@param x number (float) x pos
---@param y number (float) y pos
---@param gxtName string Unknown, always "NUMBER"
---@param value number (float) number to print/draw
---@param unknown number (positive integer) amount of decimal places to show
---@return nil
function DisplayTextWithFloat(x, y, gxtName, value, unknown) end

---
---Draws gxt entry with the literal string (4th parameter) at coordinates x, y.
---"~e~" in the gxt text will be replaced with the string. Use "STRING" or ("PZ\_STRING") gxt entry (which is just "~e~") to just display the literal string.
---
---
---@param x number (float) x pos
---@param y number (float) y pos
---@param gxtName string gxt entry
---@param literalStr string string to substitute
---@return nil
function DisplayTextWithLiteralString(x, y, gxtName, literalStr) end

---
---Draws a GXT entry text with an additional integer number.
---
---
---@param x number (float) x pos
---@param y number (float) y pos
---@param gxtName string gxt entry
---@param value number (integer) additional number
---@return nil
function DisplayTextWithNumber(x, y, gxtName, value) end

---
---Draws a GXT entry text with an additional string.
---
---
---@param x number (float) x pos
---@param y number (float) y pos
---@param gxtName string gxt entry
---@param gxtStringName string additional string 1
---@return nil
function DisplayTextWithString(x, y, gxtName, gxtStringName) end

---
---Draws a GXT entry text with two additional strings.
---
---
---@param x number (float) x pos
---@param y number (float) y pos
---@param gxtName string gxt entry
---@param literalStr1 string additional string 1
---@param literalStr2 string additional string 2
---@return nil
function DisplayTextWithTwoLiteralStrings(x, y, gxtName, literalStr1, literalStr2) end

---
---Draws a GXT entry text with two additional non-literal strings.
---
---
---@param x number (float) x pos
---@param y number (float) y pos
---@param gxtName string gxt entry
---@param gxtStringName1 string additional string 1
---@param gxtStringName2 string additional string 2
---@return nil
function DisplayTextWithTwoStrings(x, y, gxtName, gxtStringName1, gxtStringName2) end

---
---No description (
---
---
---@param gxtName string
---@return number (positive integer)
function GetLengthOfStringWithThisTextLabel(gxtName) end

---
---No description (
---
---
---@param gxtName string
---@param chars number (positive integer)
---@return string
function GetFirstNCharactersOfString(gxtName, chars) end

---
---No description (
---
---
---@return number (positive integer) pRenderId
function GetMobilePhoneRenderId() end

---
---No description (
---
---
---@param gxtName string
---@param index number (positive integer)
---@return string
function GetNthIntegerInString(gxtName, index) end

---
---No description (
---
---
---@return number (positive integer) pRenderId
function GetScriptRendertargetRenderId() end

---
---No description (
---
---
---@param hashKey number (positive integer) hash key
---@return string
function GetStringFromHashKey(hashKey) end

---
---No description (
---
---
---@param gxtName string
---@return number (integer)
function GetStringWidth(gxtName) end

---
---No description (
---
---
---@param gxtName string
---@param number number (integer)
---@return number (integer)
function GetStringWidthWithNumber(gxtName, number) end

---
---No description (
---
---
---@param gxtName string
---@param literalString string
---@return number (integer)
function GetStringWidthWithString(gxtName, literalString) end

---
---No description (
---
---
---@param textIndex number (positive integer)
---@return boolean
function HasAdditionalTextLoaded(textIndex) end

---
---No description (
---
---
---@param textName string
---@param textIndex number (positive integer)
---@return boolean
function HasThisAdditionalTextLoaded(textName, textIndex) end

---
---No description (
---
---
---@param font number (positive integer)
---@return boolean
function IsFontLoaded(font) end

---
---No description (
---
---
---@param textIndex number (positive integer)
---@return boolean
function IsStreamingAdditionalText(textIndex) end

---
---
---This function loads a table from a GXT file. You have to call this function with a valid GXT table before displaying one of its entries.
---While some resources have functions dedicated to un-loading them (such as MARK\_MODEL\_AS\_NO\_LONGER\_NEEDED for models) GXT tables do not.
---
---
---@param textName string the name of a table in a gxt file
---@param textIndex number (positive integer) unknown
---@return nil
function LoadAdditionalText(textName, textIndex) end

---
---No description (
---
---
---@param font number (positive integer)
---@return nil
function LoadTextFont(font) end

---
---No description (
---
---
---@param gxtName string
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function Print(gxtName, timeMS, enable) end

---
---No description (
---
---
---@param gxtName string
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function PrintBig(gxtName, timeMS, enable) end

---
---
---This function prints an entry from a GTX table in a help box (black rectangle at the top right corner of the screen) that disappears shortly. If you want to manage the time it takes for it to disappear you should use PRINT\_HELP\_FOREVER. Before calling this function you must load its corresponding table using LOAD\_ADDITIONAL\_TEXT.
---
---
---@param gxtName string the name of an entry in a GXT table
---@return nil
function PrintHelp(gxtName) end

---
---
---This function prints an entry from a GTX table in a help box (black rectangle at the top right corner of the screen) that doesn't disappear until CLEAR\_HELP is called. Before calling this function you must load its corresponding table using LOAD\_ADDITIONAL\_TEXT.
---
---
---@param gxtName string the name of an entry in a GXT table
---@return nil
function PrintHelpForever(gxtName) end

---
---No description (
---
---
---@param gxtName string
---@param value number (integer)
---@return nil
function PrintHelpForeverWithNumber(gxtName, value) end

---
---No description (
---
---
---@param gxtName string
---@param gxtText string
---@return nil
function PrintHelpForeverWithString(gxtName, gxtText) end

---
---No description (
---
---
---@param gxtName string
---@param gxtText string
---@return nil
function PrintHelpForeverWithStringNoSound(gxtName, gxtText) end

---
---No description (
---
---
---@param gxtName string
---@param value number (integer)
---@return nil
function PrintHelpWithNumber(gxtName, value) end

---
---No description (
---
---
---@param gxtName string
---@param gxtText string
---@return nil
function PrintHelpWithString(gxtName, gxtText) end

---
---No description (
---
---
---@param gxtName string
---@param gxtText string
---@return nil
function PrintHelpWithStringNoSound(gxtName, gxtText) end

---
---This function prints the GTX entry listed in P1, for the amount of time in milliseconds in P2, at the bottom of the screen. This is similar to the TEXT\_NOW opcode in the III/VC/SA games.
---
---
---@param gxtName string GTX entry
---@param timeMS number (positive integer) time in milliseconds
---@param enable boolean unknown (usually 1 or 0)
---@return nil
function PrintNow(gxtName, timeMS, enable) end

---
---No description (
---
---
---@param gxtName string
---@param gxtText string
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function PrintStringInString(gxtName, gxtText, timeMS, enable) end

---
---No description (
---
---
---@param gxtName string
---@param gxtText string
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function PrintStringInStringNow(gxtName, gxtText, timeMS, enable) end

---
---This function prints the string specified in P2, for the amount of time in milliseconds in P3, at the bottom of the screen.
---
---
---@param gxtName string Unknown (always "STRING")
---@param timeMS number (positive integer) Time in Milliseconds
---@param enable boolean Unknown (always 1)
---@return nil text Message to Display
function PrintStringWithLiteralStringNow(gxtName, timeMS, enable) end

---
---No description (
---
---
---@param gxtName string
---@param value1 number (integer)
---@param value2 number (integer)
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function PrintWith2Numbers(gxtName, value1, value2, timeMS, enable) end

---
---No description (
---
---
---@param gxtName string
---@param value1 number (integer)
---@param value2 number (integer)
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function PrintWith2NumbersNow(gxtName, value1, value2, timeMS, enable) end

---
---No description (
---
---
---@param gxtName string
---@param value number (integer)
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function PrintWithNumber(gxtName, value, timeMS, enable) end

---
---No description (
---
---
---@param gxtName string
---@param value number (integer)
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function PrintWithNumberBig(gxtName, value, timeMS, enable) end

---
---No description (
---
---
---@param gxtName string
---@param value number (integer)
---@param timeMS number (positive integer)
---@param enable boolean
---@return nil
function PrintWithNumberNow(gxtName, value, timeMS, enable) end

---
---No description (
---
---
---@param value number (float)
---@return nil
function Printfloat(value) end

---
---No description (
---
---
---@param value number (integer)
---@return nil
function Printint(value) end

---
---No description (
---
---
---@return nil
function Printnl() end

---
---No description (
---
---
---@param value string
---@return nil
function Printstring(value) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function Printvector(x, y, z) end

---
---No description (
---
---
---@param textName string
---@param textIndex number (positive integer)
---@return nil
function RequestAdditionalText(textName, textIndex) end

---
---No description (
---
---
---@param w number (float)
---@param h number (float)
---@return nil
function SetTextScale(w, h) end

---
---No description (
---
---
---@param value boolean
---@return nil
function SetTextBackground(value) end

---
---No description (
---
---
---@param value boolean
---@return nil
function SetTextCentre(value) end

---
---No description (
---
---
---@param r number (positive integer)
---@param g number (positive integer)
---@param b number (positive integer)
---@param a number (positive integer)
---@return nil
function SetTextColour(r, g, b, a) end

---
---No description (
---
---
---@param value boolean
---@return nil
function SetTextDrawBeforeFade(value) end

---
---No description (
---
---
---@param displayShadow boolean
---@param r number (positive integer)
---@param g number (positive integer)
---@param b number (positive integer)
---@param a number (positive integer)
---@return nil
function SetTextDropshadow(displayShadow, r, g, b, a) end

---
---No description (
---
---
---@param displayEdge boolean
---@param r number (positive integer)
---@param g number (positive integer)
---@param b number (positive integer)
---@param a number (positive integer)
---@return nil
function SetTextEdge(displayEdge, r, g, b, a) end

---
---This function sets the font to be used.
---Font ids that can be used:
---
---
---
---
---
---Source: http://blog.ooiinnkk.de/?p=9
---
---
---@param font number (positive integer) font id
---@return nil
function SetTextFont(font) end

---
---No description (
---
---
---@param value boolean
---@return nil
function SetTextJustify(value) end

---
---No description (
---
---
---@param unk1 number (positive integer)
---@param unk2 number (positive integer)
---@return nil
function SetTextLineDisplay(unk1, unk2) end

---
---No description (
---
---
---@param lineHeight number (float)
---@return nil
function SetTextLineHeightMult(lineHeight) end

---
---No description (
---
---
---@param value boolean
---@return nil
function SetTextProportional(value) end

---
---No description (
---
---
---@param renderId number (positive integer)
---@return nil
function SetTextRenderId(renderId) end

---
---No description (
---
---
---@param value boolean
---@return nil
function SetTextRightJustify(value) end

---
---No description (
---
---
---@param value boolean
---@return nil
function SetTextToUseTextFileColours(value) end

---
---No description (
---
---
---@param value boolean
---@return nil
function SetTextUseUnderscore(value) end

---
---No description (
---
---
---@param unk1 number (float)
---@param unk2 number (float)
---@return nil
function SetTextWrap(unk1, unk2) end

---
---No description (
---
---
---@param dictionary number (TextureDict) Texture library handle
---@param textureName string Name of texture (*.dds file, exclude extension in use)
---@return number (integer) Returns the texture handle.
function GetTexture(dictionary, textureName) end

---
---No description (
---
---
---@param txdName string Texture library handler (without extension)
---@param textureName string Name of texture
---@return number (integer) Texture handler
function GetTextureFromStreamedTxd(txdName, textureName) end

---
---No description (
---
---
---@param txdName string
---@return number (integer)
function GetTxd(txdName) end

---
---No description (
---
---
---@param txdName string Name of texture library (without extension)
---@return boolean Whether this .wtd file is loaded
function HasStreamedTxdLoaded(txdName) end

---
---No description (
---
---
---@param txdName string Name of texture library (*.wtd file, exclude extension in use)
---@return number (integer) Returns the texture library handle.
function LoadTxd(txdName) end

---
---No description (
---
---
---@param txdName string
---@return nil
function MarkStreamedTxdAsNoLongerNeeded(txdName) end

---
---No description (
---
---
---@param texture number (Texture) Handle of the texture to release from memory
---@return nil
function ReleaseTexture(texture) end

---
---This function requests .wtd texture dictionary file which is streamed via server streaming system. Currently works only in CitizenMP:IV Reloaded.
---
---
---@param txdName string .wtd texture dictionary file name (without extension)
---@param unknown boolean
---@return nil
function RequestStreamedTxd(txdName, unknown) end

---
---No description (
---
---
---@param txd number (TextureDict)
---@return nil
function RemoveTxd(txd) end

---
---No description (
---
---
---@param stat number (positive integer)
---@param amount number (positive integer)
---@return nil
function DecrementIntStat(stat, amount) end

---
---This function returns a value of the integer stat.
---
---
---@param stat number (positive integer) integer stat number
---@return number (positive integer) value of the stat
function GetIntStat(stat) end

---
---No description (
---
---
---@param stat number (positive integer)
---@param value number (float)
---@return nil
function IncrementFloatStatNoMessage(stat, value) end

---
---No description (
---
---
---@param stat number (positive integer)
---@param value number (positive integer)
---@return nil
function IncrementIntStat(stat, value) end

---
---No description (
---
---
---@param stat number (positive integer)
---@param value number (positive integer)
---@return nil
function IncrementIntStatNoMessage(stat, value) end

---
---This function sets a new value of the integer stat.
---
---
---@param stat number (positive integer) integer stat number
---@param value number (positive integer) new value of the stat
---@return nil
function SetIntStat(stat, value) end

---
---This native function always returns 0 as its result. GTA 4 has several functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could vary (being more than 1).
---
---
---@param padIndex number (positive integer) pointer to variable to store function result
---@return boolean always 0
---@return number (float) pPitch
---@return number (float) pRoll
function GetPadPitchRoll(padIndex) end

---
---No description (
---
---
---@param padIndex number (positive integer)
---@return number (positive integer) pLeftX
---@return number (positive integer) pLeftY
---@return number (positive integer) pRightX
---@return number (positive integer) pRightY
function GetPositionOfAnalogueSticks(padIndex) end

---
---Gets if a specified button is pressed or not. Not really sure what the difference is from IS\_BUTTON\_PRESSED.
---
---
---@param padIndex number (positive integer) Controller ID (0)
---@param button number (positive integer) Button ID
---@return boolean Whether the specified button is pressed or not.
function IsButtonJustPressed(padIndex, button) end

---
---Gets if a specified button is pressed or not.
---
---
---@param padIndex number (positive integer) Controller ID (0)
---@param button number (positive integer) Button ID
---@return boolean Whether the specified button is pressed or not.
function IsButtonPressed(padIndex, button) end

---
---The results of this function are either unknown or untested.
---
---
---@return number (positive integer) Unknown
function GetSoundId() end

---
---The results of this function are either unknown or untested.
---
---
---@param sound number (positive integer) Unknown (sound idï¿½?)
---@return boolean Unknown
function HasSoundFinished(sound) end

---
---This function plays an audio event anywhere.
---
---
---@param name string audio event
---@return nil
function PlayAudioEvent(name) end

---
---Note: Not all parameters are use all the time, some are skipped entirely
---Taken from abigail2.txt, act\_cinema.txt, agency\_heist1.txt, agency\_heist3a.txt, agency\_heist3b.txt, altruist\_cult.txt.
---
---
---@param sound number (positive integer) Unknown, Suggested: -1
---@param soundName string Sound FileName, e.g "NAV_UP_DOWN"
---@return nil
function PlaySoundFrontend(sound, soundName) end

---
---No description (
---
---
---@param sound number (positive integer)
---@param varname string
---@param value number (float)
---@return nil
function SetVariableOnSound(sound, varname, value) end

---
---No description (
---
---
---@param sound number (positive integer)
---@return nil
function StopSound(sound) end

---
---The results of this function are either unknown or untested.
---
---
---@param sound number (positive integer) Unknown
---@return nil
function ReleaseSoundId(sound) end

---
---No description (
---
---
---@param hour number (positive integer) hour
---@param minute number (positive integer) minute
---@return nil
function ForceTimeOfDay(hour, minute) end

---
---No description (
---
---
---@param hour number (positive integer)
---@param minute number (positive integer)
---@return nil
function ForwardToTimeOfDay(hour, minute) end

---
---No description (
---
---
---@return number (positive integer) day variable to store day
---@return number (positive integer) month variable to store month
function GetCurrentDate() end

---
---No description (
---
---
---@return number (positive integer) day of the week
function GetCurrentDayOfWeek() end

---
---No description (
---
---
---@return number (positive integer)
function GetHoursOfDay() end

---
---No description (
---
---
---@return number (positive integer)
function GetMinutesOfDay() end

---
---No description (
---
---
---@param hour number (positive integer)
---@param minute number (positive integer)
---@return number (positive integer)
function GetMinutesToTimeOfDay(hour, minute) end

---
---No description (
---
---
---@return number (positive integer) hour
---@return number (positive integer) minute
function GetTimeOfDay() end

---
---No description (
---
---
---@return nil
function ReleaseTimeOfDay() end

---
---This native set time of the game.
---For Example:
---It means that game time will be at 08:00 am
---
---
---@param hour number (positive integer) hour
---@param minute number (positive integer) minute
---@return nil
function SetTimeOfDay(hour, minute) end

---
---No description (
---
---
---@return nil
function SetTimeOneDayBack() end

---
---No description (
---
---
---@return nil
function SetTimeOneDayForward() end

---
---This function sets the overall gamespeed. The default value is 1.0. Half the gamespeed would be 0.5.
---
---
---@param scale number (float) timescale
---@return nil
function SetTimeScale(scale) end

---
---No description (
---
---
---@param fire number (FireId) fire handle
---@return boolean is extinguished or not
function IsScriptFireExtinguished(fire) end

---
---No description (
---
---
---@param fire number (FireId)
---@return nil
function RemoveScriptFire(fire) end

---
---Starts specified vehicle on fire.
---
---
---@param vehicle number (Vehicle) Vehicle handle.
---@return number (integer)
function StartCarFire(vehicle) end

---
---Starts specified character on fire.
---
---
---@param ped number (Ped) Char handle.
---@return number (integer)
function StartCharFire(ped) end

---
---No description (
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param numGenerationsAllowed number (positive integer) number of generations of fire allowed
---@param strength number (positive integer) strength of the fire
---@return number (integer) fire id
function StartScriptFire(x, y, z, numGenerationsAllowed, strength) end

---
---This function disables the main vehicle radio. The radio will fade out instead of instantly turning off. Other radio sources like background music or the faint radio heard outside of the vehicle will still be heard. The radio can be reenabled using ENABLE\_FRONTEND\_RADIO.
---
---
---@return nil
function DisableFrontendRadio() end

---
---No description (
---
---
---@return nil
function EnableFrontendRadio() end

---
---No description (
---
---
---@param stationName string station name
---@return nil
function FreezeRadioStation(stationName) end

---
---This function returns the index of the current radio station in the player's vehicle.
---
---
---@return number (positive integer) radio station index
function GetPlayerRadioStationIndex() end

---
---This function returns the name of the current radio station in the player's vehicle.
---
---
---@return string radio station name
function GetPlayerRadioStationName() end

---
---No description (
---
---
---@return boolean
function IsRadioRetuning() end

---
---This function retunes the radio in the player's vehicle to the station with given index.
---
---
---@param radioStation number (positive integer) radio station index
---@return nil
function RetuneRadioToStationIndex(radioStation) end

---
---No description (
---
---
---@return nil
function AbortAllGarageActivity() end

---
---Activates cheat specified by the index.
---
---
---@param cheat number (positive integer) Cheat Index
---@return nil
function ActivateCheat(cheat) end

---
---No description (
---
---
---@return nil
function ActivateFrontend() end

---
---No description (
---
---
---@return nil
function ActivateSaveMenu() end

---
---Creates an Explosion with given parameters. Do NOT over use. It will stop rendering the explosion graphics/camera shake
---
---
---@param x number (float) X Coordinate
---@param y number (float) Y Coordinate
---@param z number (float) Z Coordinate
---@param exptype number (ExplosionType) Explosion Type
---@param radius number (float) Radius
---@param playsound boolean audible
---@param novisual boolean invisible
---@param camshake number (float) Camera shake
---@return nil
function AddExplosion(x, y, z, exptype, radius, playsound, novisual, camshake) end

---
---Switches the emergency services on and off
---
---
---@param allow boolean Switches the emergency services on and off
---@return nil
function AllowEmergencyServices(allow) end

---
---Allows the game to pause for streaming, or switches the function off.
---
---
---@param allow boolean Switches the game to allow for pausing when streaming
---@return nil
function AllowGameToPauseForStreaming(allow) end

---
---Allows or disallows stunt jumps to trigger.
---
---
---@param allow boolean Allows or disallows stunt jumps to trigger
---@return nil
function AllowStuntJumpsToTrigger(allow) end

---
---Determines whether the widescreen borders are active.
---
---
---@return boolean True or false depending on whether the widescreen borders are active
function AreWidescreenBordersActive() end

---
---Awards specified achievement to current player. Use HAS\_ACHIEVEMENT\_BEEN\_PASSED to check if the achievement has been passed.
---
---
---@param achievement number (positive integer) Achievement Index
---@return any
function AwardAchievement(achievement) end

---
---No description (
---
---
---@return boolean
function CanPhoneBeSeenOnScreen() end

---
---No description (
---
---
---@return nil
function CancelOverrideRestart() end

---
---No description (
---
---
---@return nil
function ClearShakePlayerpadWhenControllerDisabled() end

---
---The results of this function are either unknown or untested.
---
---
---@return nil
function ClearTimecycleModifier() end

---
---No description (
---
---
---@return nil
function DeactivateFrontend() end

---
---This function returns true if the game was saved successfully after the last time the save menu was opened.
---Returns false if saving failed or if the save menu was cancelled.
---It is currently unknown whether this function applies to auto-saves.
---
---
---@return boolean 1 if game was saved, otherwise 0
function DidSaveCompleteSuccessfully() end

---
---Sets if the pause menu is disabled or not. Untested
---
---
---@param disabled boolean true/false
---@return nil
function DisablePauseMenu(disabled) end

---
---This function disables the police scanner, which is the voice heard when the player commits a crime and the police notices it. The police scanner can be reenabled using ENABLE\_POLICE\_SCANNER.
---
---
---@return nil
function DisablePoliceScanner() end

---
---Toggle display of player's ammo values for the currently selected weapon.
---
---
---@param display boolean on/off
---@return nil
function DisplayAmmo(display) end

---
---Toggle display of area/zone name (i.e. "Express Way" / "Algonquin" in Ascot Gray and Forest Green on the bottom right)
---
---
---@param display boolean on/off
---@return nil
function DisplayAreaName(display) end

---
---Toggle display of player's cash value and cash additives (when cash is added/removed)
---
---
---@param display boolean on/off
---@return nil
function DisplayCash(display) end

---
---No description (
---
---
---@param display boolean display
---@return nil
function DisplayFrontendMapBlips(display) end

---
---Toggle HUD.
---
---
---@param display boolean on/off
---@return nil
function DisplayHud(display) end

---
---Toggle Radar.
---
---
---@param display boolean on/off
---@return nil
function DisplayRadar(display) end

---
---Displays sniper scope for the current frame. Untested
---
---
---@return nil
function DisplaySniperScopeThisFrame() end

---
---No description (
---
---
---@return nil
function DoAutoSave() end

---
---This function can be called only after DO\_SCREEN\_FADE\_OUT. It's fade in the screen and turn on the sound of the game.
---
---
---@param timeMS number (positive integer) Duration in Milliseconds (ms)
---@return nil
function DoScreenFadeIn(timeMS) end

---
---No description (
---
---
---@param timeMS number (positive integer) Time to fade in
---@return nil
function DoScreenFadeInUnhacked(timeMS) end

---
---This function fade out the screen and turn off the sound of the game. To fade in the screen and turn on the sound call DO\_SCREEN\_FADE\_IN.
---
---
---@param timeMS number (positive integer) Duration in milliseconds (ms)
---@return nil
function DoScreenFadeOut(timeMS) end

---
---No description (
---
---
---@param timeMS number (positive integer) Time to fade out
---@return nil
function DoScreenFadeOutUnhacked(timeMS) end

---
---This draws a rectangle on the screen. The function has to be in a loop in order for the rectangle to appear.
---
---
---@param x1 number (float) x-position
---@param y1 number (float) y-position
---@param x2 number (float) x-size
---@param y2 number (float) y-size
---@param r number (positive integer) R
---@param g number (positive integer) G
---@param b number (positive integer) B
---@param a number (positive integer) A
---@return nil
function DrawRect(x1, y1, x2, y2, r, g, b, a) end

---
---This function sets a cap on the amount of ammo the player can carry. Turning this function on will remove the extra ammo if the player has more ammo than the cap. The caps are set in the WeaponInfo.xml file.
---
---
---@param enable boolean set (0=off / 1=on)
---@return nil
function EnableMaxAmmoCap(enable) end

---
---The results of this function are either unknown or untested.
---
---
---@return nil
function EnablePoliceScanner() end

---
---No description (
---
---
---@param enable boolean enable
---@return nil
function EnableSceneStreaming(enable) end

---
---No description (
---
---
---@return nil
function FakeDeatharrest() end

---
---This native will give you two hashes for the street you are on (parameters 4 and 5). To convert the hashes to strings, use the GET\_STRING\_FROM\_HASH\_KEY native.
---
---
---@param pX number (float) x
---@param pY number (float) y
---@param pZ number (float) z
---@return number (positive integer) strHash0 variable to store place 1
---@return number (positive integer) strHash1 variable to store place 2
function FindStreetNameAtPosition(pX, pY, pZ) end

---
---Create Invisible Bullet Position1 to Position2.
---
---
---@param x number (float) X Position
---@param y number (float) Y Position
---@param z number (float) Z Position
---@param targetX number (float) X Position
---@param targetY number (float) Y Position
---@param targetZ number (float) Z Position
---@param unknown number (positive integer) BulletDamage
---@return nil
function FireSingleBullet(x, y, z, targetX, targetY, targetZ, unknown) end

---
---No description (
---
---
---@param on boolean flash
---@return nil
function FlashWeaponIcon(on) end

---
---No description (
---
---
---@param stationName string
---@return nil
function ForceInitialPlayerStation(stationName) end

---
---This function forces the whole screen to go black and show the "LOADING..." text on the bottom right corner of the screen. The player is frozen and the game can't be paused while it's on.
---
---
---@param force boolean set (0=off / 1=on)
---@return nil
function ForceLoadingScreen(force) end

---
---No description (
---
---
---@param r number (positive integer)
---@param g number (positive integer)
---@param b number (positive integer)
---@return number (positive integer) pR
---@return number (positive integer) pG
---@return number (positive integer) pB
function GetCorrectedColour(r, g, b) end

---
---No description (
---
---
---@return boolean
function GetCreateRandomCops() end

---
---No description (
---
---
---@return number (positive integer) Episode
function GetCurrentEpisode() end

---
---No description (
---
---
---@return number (positive integer) language
function GetCurrentLanguage() end

---
---No description (
---
---
---@return number (positive integer)
function GetEpisodeIndexFromSummons() end

---
---Returns "BLANK\_EPISODE\_NAME" in IV, untested in EFLC.
---
---
---@param episodeIndex number (positive integer)
---@return string episode name
function GetEpisodeName(episodeIndex) end

---
---This function returns a value of the float stat.
---
---
---@param stat number (positive integer) float stat number
---@return number (float) value of the stat
function GetFloatStat(stat) end

---
---No description (
---
---
---@return number (float) time
function GetFrameTime() end

---
---Gets time game has been played in milliseconds (time in menu screen does not count).
---
---
---@return number (positive integer) pTimer variable to store game time
function GetGameTimer() end

---
---This function can be used to get the hash keys that are required for spawning peds, vehicles, objects, etc.
---Example: CREATE\_CHAR(22, GET\_HASH\_KEY("IG\_Niko"), x, y, z, ped, true) CREATE\_CAR(GET\_HASH\_KEY("COMET"), x, y, z, vehicle, true)
---Can find model names by opening the "peds.ide"/"vehicles.ide" files with Notepad, they are located in the following folders. GTAIV\common\data\ GTAIV\common\data\ \TLAD\common\data\ \TBoGT\common\data\
---
---
---@param value string ModelName  (Doesn't appear to be case-sensitive)
---@return number (positive integer) HashKey
function GetHashKey(value) end

---
---No description (
---
---
---@param type number (positive integer) Color index?
---@return number (positive integer) pR Variable to store Red value.
---@return number (positive integer) pG Variable to store Green value.
---@return number (positive integer) pB Variable to store Blue value
---@return number (positive integer) pA Unknown
function GetHudColour(type) end

---
---No description (
---
---
---@return number (positive integer)
function GetIdOfThisThread() end

---
---No description (
---
---
---@return boolean
function GetIsDepositAnimRunning() end

---
---No description (
---
---
---@return boolean
function GetIsHidef() end

---
---No description (
---
---
---@return boolean
function GetIsWidescreen() end

---
---No description (
---
---
---@param playerRank number (positive integer)
---@return number (positive integer)
function GetLeftPlayerCashToReachLevel(playerRank) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return number (positive integer)
function GetMapAreaFromCoords(x, y, z) end

---
---No description (
---
---
---@return boolean
function GetMissionFlag() end

---
---No description (
---
---
---@return number (positive integer) pMaxWantedLevel
function GetMaxWantedLevel() end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return string
function GetNameOfInfoZone(x, y, z) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return string
function GetNameOfZone(x, y, z) end

---
---No description (
---
---
---@return number (positive integer)
function GetNumStreamingRequests() end

---
---No description (
---
---
---@param scriptName string
---@return number (positive integer)
function GetNumberOfInstancesOfStreamedScript(scriptName) end

---
---No description (
---
---
---@return number (positive integer) players present
function GetNumberOfPlayers() end

---
---No description (
---
---
---@return number (positive integer) Returns the time since the last time the player was arrested.
function GetTimeSinceLastArrest() end

---
---No description (
---
---
---@return number (positive integer) Returns the time since the last time the player died.
function GetTimeSinceLastDeath() end

---
---No description (
---
---
---@param achievement number (positive integer)
---@return boolean
function HasAchievementBeenPassed(achievement) end

---
---No description (
---
---
---@return boolean
function HasDeatharrestExecuted() end

---
---No description (
---
---
---@return boolean
function HasResprayHappened() end

---
---No description (
---
---
---@param scriptName string scriptname (Dont include the extension)
---@return boolean
function HasScriptLoaded(scriptName) end

---
---Returns a boolean indicating if the specified animation has been loaded.
---Example Usage: HAVE\_ANIMS\_LOADED("[emailï¿½protected]")
---
---
---@param animName string animation name
---@return boolean true if anim has been loaded
function HaveAnimsLoaded(animName) end

---
---No description (
---
---
---@param requestId number (positive integer)
---@return boolean
function HaveRequestedPathNodesBeenLoaded(requestId) end

---
---No description (
---
---
---@return nil
function HideHelpTextThisFrame() end

---
---No description (
---
---
---@return nil
function HideHudAndRadarThisFrame() end

---
---This native function always returns 0 as its result. GTA 4 has several functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could vary (being more than 1).
---
---
---@return boolean always 0
function IsAussieVersion() end

---
---No description (
---
---
---@return boolean
function IsAutoAimingOn() end

---
---No description (
---
---
---@return boolean
function IsAutoSaveInProgress() end

---
---No description (
---
---
---@return boolean true if your player is in an interior
function IsInteriorScene() end

---
---No description (
---
---
---@return boolean
function IsFrontendFading() end

---
---No description (
---
---
---@return boolean
function IsGameInControlOfMusic() end

---
---This native function always returns 0 as its result. GTA 4 has several functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could vary (being more than 1).
---
---
---@return boolean always 0
function IsGermanVersion() end

---
---The results of this function are either unknown or untested.
---
---
---@return boolean Unknown
function IsHelpMessageBeingDisplayed() end

---
---No description (
---
---
---@return boolean
function IsHintRunning() end

---
---IS\_HUD\_PREFERENCE\_SWITCHED\_ON
---Function tested with the 2020 Patch of GTA IV.
---
---
---@return boolean Return true if the hud is activated in your game settings. Otherwise false.
function IsHudPreferenceSwitchedOn() end

---
---No description (
---
---
---@return boolean
function IsHudReticuleComplex() end

---
---No description (
---
---
---@return boolean
function IsInSpectatorMode() end

---
---No description (
---
---
---@return boolean
function IsLookInverted() end

---
---No description (
---
---
---@return boolean
function IsMemoryCardInUse() end

---
---No description (
---
---
---@return boolean
function IsMessageBeingDisplayed() end

---
---Returns true if a minigame is currently in progress. Returns false if no minigame is in progress. Note: using an in-game PC returns true too.
---
---
---@return boolean
function IsMinigameInProgress() end

---
---No description (
---
---
---@return boolean
function IsMissionCompletePlaying() end

---
---No description (
---
---
---@return boolean
function IsMobilePhoneCallOngoing() end

---
---No description (
---
---
---@return boolean
function IsMobilePhoneRadioActive() end

---
---No description (
---
---
---@return boolean
function IsPauseMenuActive() end

---
---No description (
---
---
---@return boolean
function IsPayNSprayActive() end

---
---Returns if the player is being arrested or not. Untested
---
---
---@return boolean returns if the player is being arrested
function IsPlayerBeingArrested() end

---
---No description (
---
---
---@return boolean
function IsPlayerOnline() end

---
---No description (
---
---
---@return boolean returns if the screen is faded in or not
function IsScreenFadedIn() end

---
---No description (
---
---
---@return boolean returns if the screen is faded out or not
function IsScreenFadedOut() end

---
---No description (
---
---
---@return boolean returns if the screen is fading or not
function IsScreenFading() end

---
---No description (
---
---
---@return boolean returns if the screen is fading in or not
function IsScreenFadingIn() end

---
---No description (
---
---
---@return boolean returns if the screen is fading out or not
function IsScreenFadingOut() end

---
---No description (
---
---
---@return boolean
function IsSniperInverted() end

---
---No description (
---
---
---@return boolean
function IsSystemUiShowing() end

---
---No description (
---
---
---@return boolean
function IsThisAMinigameScript() end

---
---No description (
---
---
---@param threadId number (positive integer)
---@return boolean
function IsThreadActive(threadId) end

---
---No description (
---
---
---@param value boolean
---@return number (positive integer)
function LoadAllPathNodes(value) end

---
---No description (
---
---
---@param scriptName string scriptname (Dont include the extension)
---@return nil
function MarkScriptAsNoLongerNeeded(scriptName) end

---
---No description (
---
---
---@return nil
function PauseGame() end

---
---No description (
---
---
---@return nil
function PlayMovie() end

---
---No description (
---
---
---@return nil
function PopulateNow() end

---
---Loads an animation file into memory
---Code example:
---
---
---@param animName string Animation name
---@return nil
function RequestAnims(animName) end

---
---No description (
---
---
---@return nil
function ReleaseMovie() end

---
---No description (
---
---
---@return nil
function ReleaseWeather() end

---
---No description (
---
---
---@param animName string
---@return nil
function RemoveAnims(animName) end

---
---No description (
---
---
---@param coverPoint number (CoverPoint)
---@return nil
function RemoveCoverPoint(coverPoint) end

---
---No description (
---
---
---@param iplName string
---@return nil
function RemoveIpl(iplName) end

---
---No description (
---
---
---@param iplName string
---@return nil
function RequestIpl(iplName) end

---
---This function can make the camera controllable if certain functions, commonly SET\_PLAYER\_CONTROL, would otherwise make the camera uncontrollable.
---
---
---@param value boolean set (0=off / 1=on)
---@return nil
function SetCameraControlsDisabledWithPlayerControls(value) end

---
---No description (
---
---
---@param isMission boolean
---@return nil
function SetMissionFlag(isMission) end

---
---This function sets a new value of the float stat.
---
---
---@param stat number (positive integer) float stat number
---@param value number (float) new value of the stat
---@return nil
function SetFloatStat(stat, value) end

---
---No description (
---
---
---@param zoom number (float)
---@return nil
function SetRadarZoom(zoom) end

---
---No description (
---
---
---@param value number (positive integer)
---@return nil
function Settimera(value) end

---
---No description (
---
---
---@param value number (positive integer)
---@return nil
function Settimerb(value) end

---
---No description (
---
---
---@param multiplier number (float)
---@return nil
function SetWantedMultiplier(multiplier) end

---
---No description (
---
---
---@return nil
function TerminateThisScript() end

---
---No description (
---
---
---@return number (positive integer)
function Timera() end

---
---No description (
---
---
---@return number (positive integer)
function Timerb() end

---
---No description (
---
---
---@return number (positive integer)
function Timestep() end

---
---No description (
---
---
---@return nil
function UnlockLazlowStation() end

---
---No description (
---
---
---@return nil
function UnregisterScriptWithAudio() end

---
---No description (
---
---
---@return nil
function UnpauseGame() end

---
---No description (
---
---
---@param value number (float) Value
---@return number (float) Absolute value of parameter
function Absf(value) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (float) Absolute value of parameter
function Absi(value) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (float) Inverse Sine of Value
function Asin(value) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (float) Inverse Tangent of Value
function Atan(value) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (integer) Ceiling of Value
function Ceil(value) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (float) Cosine of Value
function Cos(value) end

---
---This function converts the integer value to a floating-point number.
---
---
---@param value number (positive integer) input value
---@return number (float)
function ToFloat(value) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (integer) Floor of Value (Forceful round down)
function Floor(value) end

---
---This function returns a random float between the given numbers/floats.
---
---
---@param min number (float) Minimum float.
---@param max number (float) Maximum float.
---@return number (float) pValue Variable to store the random float in.
function GenerateRandomFloatInRange(min, max) end

---
---This function returns a random integer between the given integers.
---
---
---@param min number (positive integer) Minimum integer.
---@param max number (positive integer) Maximum integer.
---@return number (positive integer) pValue Variable to store the random integer in.
function GenerateRandomIntInRange(min, max) end

---
---No description (
---
---
---@param x1 number (float)
---@param y1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@return number (float) pResult
function GetAngleBetween2dVectors(x1, y1, x2, y2) end

---
---No description (
---
---
---@param x1 number (float)
---@param y1 number (float)
---@param x2 number (float)
---@param y2 number (float)
---@return number (float) pDist
function GetDistanceBetweenCoords2d(x1, y1, x2, y2) end

---
---Check distance between x1,y1,z1 and x2,y2,z2 and returns float result in 7 parameter.
---
---
---@param x1 number (float) x1
---@param y1 number (float) y1
---@param z1 number (float) z1
---@param x2 number (float) x2
---@param y2 number (float) y2
---@param z2 number (float) z2
---@return number (float) pDist handle
function GetDistanceBetweenCoords3d(x1, y1, z1, x2, y2, z2) end

---
---No description (
---
---
---@param literalString string
---@param chars number (positive integer)
---@return string
function GetFirstNCharactersOfLiteralString(literalString, chars) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@return number (float) pHeading
function GetHeadingFromVector2d(x, y) end

---
---No description (
---
---
---@param literalString string
---@return number (positive integer)
function GetLengthOfLiteralString(literalString) end

---
---No description (
---
---
---@param str string string to check
---@return boolean is null or not
function IsStringNull(str) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (float) Trigonometric sine of the value
function Sin(value) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (float) Square root of the value
function Sqrt(value) end

---
---No description (
---
---
---@param value number (float) Value
---@return number (float) Trigonometric tangent of the value
function Tan(value) end

---
---Example for returned value: If the aspect ratio is 16:9, then the float returned will be 16 divided by 9, which is 1.778.
---
---
---@return number (float) aspect ratio
function GetAspectRatio() end

---
---This native function does nothing. GTA 4 has several native functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could be more than 0.
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return nil
function Line(x0, y0, z0, x1, y1, z1) end

---
---Creates a corona. The function should be used in a loop.
---
---
---@param x number (float) X coordinate
---@param y number (float) Y coordinate
---@param z number (float) Z-coordinate
---@param radius number (float) Radius
---@param unknown_1 ScriptAny
---@param unknown_2 ScriptAny
---@param unknown_3 ScriptAny
---@param unknown_4 ScriptAny
---@param unknown_5 ScriptAny
---@return nil
function DrawCorona(x, y, z, radius, unknown_1, unknown_2, unknown_3, unknown_4, unknown_5) end

---
---intensity 0-10 range 0-100 rgb 0-255
---
---
---@param x number (float) X coords
---@param y number (float) Y coords
---@param z number (float) Z coords
---@param r number (integer) red
---@param g number (integer) green
---@param b number (integer) blue
---@param unknown_1 float
---@param unknown_2 float
---@return nil
function DrawLightWithRange(x, y, z, r, g, b, unknown_1, unknown_2) end

---
---No description (
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param radius number (float) radius
---@return nil
function DrawSphere(x, y, z, radius) end

---
---Creates a Sphere.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param x number (float) X Coordinate
---@param y number (float) Y Coordinate
---@param z number (float) Z Coordinate
---@param radius number (float) Radius
---@param unknown_1 uint
---@return number (integer) Sphere Id
function AddSphere(x, y, z, radius, unknown_1) end

---
---No description (
---
---
---@param sphere number (positive integer)
---@return nil
function RemoveSphere(sphere) end

---
---No description (
---
---
---@return any
function Extern uint createUser3dMarker(float x, float y, float z);() end

---
---No description (
---
---
---@return any
function Extern void removeUser3dMarker(uint marker);() end

---
---This creates a translucent, colored arrow at a point. The function has to be in a loop in order for the arrow to appear.
---
---
---@param x number (float) x-coordinate
---@param y number (float) y-coordinate
---@param z number (float) z-coordinate
---@param unknown_1 float
---@param unknown_2 float
---@param r number (integer) R
---@param g number (integer) G
---@param b number (integer) B
---@param a number (integer) A
---@return nil
function DrawColouredCylinder(x, y, z, unknown_1, unknown_2, r, g, b, a) end

---
---No description (
---
---
---@param type number (integer) checkpoint type
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param unknown_1 float
---@param unknown_2 float
---@return number (positive integer) variable to store checkpoint handle
function CreateCheckpoint(type, x, y, z, unknown_1, unknown_2) end

---
---No description (
---
---
---@param checkpoint number (positive integer) checkpoint handle
---@return nil
function DeleteCheckpoint(checkpoint) end

---
---Draws a checkpoint at the specified coordinates, with the specified radius, with the specified color (RGB). Must be used in a thread (cycle)!!
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param radius number (float) radius
---@param r number (integer) r
---@param g number (integer) g
---@param b number (integer) b
---@return nil
function DrawCheckpoint(x, y, z, radius, r, g, b) end

---
---Same as DRAW\_CHECKPOINT but has an alpha value also for the color.
---
---
---@param x number (float) x
---@param y number (float) y
---@param z number (float) z
---@param radius number (float) radius
---@param r number (integer) r
---@param g number (integer) g
---@param b number (integer) b
---@param a number (integer) a
---@return nil
function DrawCheckpointWithAlpha(x, y, z, radius, r, g, b, a) end

---
---No description (
---
---
---@param use boolean
---@return nil
function UseMask(use) end

---
---No description (
---
---
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@return nil
function SetMask(unknown_1, unknown_2, unknown_3, unknown_4) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetSpritesDrawBeforeFade(set) end

---
---No description (
---
---
---@return any
function Void setSpriteHdrMultiplier(float multiplier);() end

---
---This function draws sprite which can be get by using GET\_TEXTURE or GET\_TEXTURE\_FROM\_STREAMED\_TXD.
---
---
---@param texture number (positive integer) Texture
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@param angle number (float) Rotation (0-360)
---@param r number (integer) Red (0-255)
---@param g number (integer) Green (0-255)
---@param b number (integer) Blue (0-255)
---@param a number (integer) Alpha (0-255)
---@return nil
function DrawSprite(texture, unknown_1, unknown_2, unknown_3, unknown_4, angle, r, g, b, a) end

---
---No description (
---
---
---@param texture number (positive integer)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@param angle number (float)
---@param r number (integer)
---@param g number (integer)
---@param b number (integer)
---@param a number (integer)
---@return nil
function DrawToplevelSprite(texture, unknown_1, unknown_2, unknown_3, unknown_4, angle, r, g, b, a) end

---
---No description (
---
---
---@param toggle boolean
---@return nil
function ToggleToplevelSprite(toggle) end

---
---No description (
---
---
---@param texture number (positive integer)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@param angle number (float)
---@param r number (integer)
---@param g number (integer)
---@param b number (integer)
---@param a number (integer)
---@return nil
function DrawSpriteWithUv(texture, unknown_1, unknown_2, unknown_3, unknown_4, angle, r, g, b, a) end

---
---No description (
---
---
---@param texture number (positive integer)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@param angle number (float)
---@param r number (integer)
---@param g number (integer)
---@param b number (integer)
---@param a number (integer)
---@return nil
function DrawSpriteWithFixedRotation(texture, unknown_1, unknown_2, unknown_3, unknown_4, angle, r, g, b, a) end

---
---No description (
---
---
---@param filename string
---@return nil
function SetCurrentMovie(filename) end

---
---No description (
---
---
---@return nil
function StopMovie() end

---
---No description (
---
---
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@param unknown_5 float
---@param r number (integer)
---@param g number (integer)
---@param b number (integer)
---@param a number (integer)
---@return nil
function DrawMovie(unknown_1, unknown_2, unknown_3, unknown_4, unknown_5, r, g, b, a) end

---
---No description (
---
---
---@param time number (float)
---@return nil
function SetMovieTime(time) end

---
---No description (
---
---
---@param volume number (float)
---@return nil
function SetMovieVolume(volume) end

---
---No description (
---
---
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@param str string
---@param alpha number (positive integer)
---@return nil
function DrawWindow(unknown_1, unknown_2, unknown_3, unknown_4, str, alpha) end

---
---No description (
---
---
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@param alpha number (positive integer)
---@return nil
function DrawCurvedWindow(unknown_1, unknown_2, unknown_3, unknown_4, alpha) end

---
---This function can disable shadows that are cast by lighting other than the sun. It has the same effect as turning the "Shadow Quality" graphics option off but with the sun still casting shadows. This function has no effect when shadows options are turned off.
---
---
---@param enable boolean set (0=off / 1=on)
---@return nil
function EnableShadows(enable) end

---
---No description (
---
---
---@param enable boolean enable
---@return nil
function EnableFancyWater(enable) end

---
---No description (
---
---
---@param enable boolean enable
---@return nil
function EnableDeferredLighting(enable) end

---
---The results of this function are either unknown or untested.
---
---
---@param unknown_1 boolean
---@param unknown_2 boolean
---@param unknown_3 boolean
---@param unknown_4 boolean
---@return nil
function SetGlobalRenderFlags(unknown_1, unknown_2, unknown_3, unknown_4) end

---
---No description (
---
---
---@return number (float) x
---@return number (float) y
function GetScreenResolution() end

---
---No description (
---
---
---@return number (float) x
---@return number (float) y
function GetPhysicalScreenResolution() end

---
---No description (
---
---
---@param texture number (positive integer)
---@return number (float) x
---@return number (float) y
function GetTextureResolution(texture) end

---
---No description (
---
---
---@param name string
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param flags number (positive integer)
---@return boolean
function TriggerPtfx(name, x, y, z, unknown_1, unknown_2, unknown_3, flags) end

---
---No description (
---
---
---@param name string
---@param ped number (Ped)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param flags number (positive integer)
---@return boolean
function TriggerPtfxOnPed(name, ped, x, y, z, unknown_1, unknown_2, unknown_3, flags) end

---
---No description (
---
---
---@param name string ptfx name
---@param ped number (Ped) ped handle
---@param x number (float) x position
---@param y number (float) y position
---@param z number (float) z position
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param pedbone number (integer) bone id
---@param flags number (positive integer) effect scale
---@return boolean
function TriggerPtfxOnPedBone(name, ped, x, y, z, unknown_1, unknown_2, unknown_3, pedbone, flags) end

---
---No description (
---
---
---@param name string
---@param veh number (Vehicle)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@return boolean
function TriggerPtfxOnVeh(name, veh, x, y, z, unknown_1, unknown_2, unknown_3, unknown_4) end

---
---No description (
---
---
---@param name string
---@param obj number (Object)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param flags number (positive integer)
---@return boolean
function TriggerPtfxOnObj(name, obj, x, y, z, unknown_1, unknown_2, unknown_3, flags) end

---
---No description (
---
---
---@param name string
---@param obj number (Object)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param objbone number (integer)
---@param flags number (positive integer)
---@return boolean
function TriggerPtfxOnObjBone(name, obj, x, y, z, unknown_1, unknown_2, unknown_3, objbone, flags) end

---
---Starts a particle effect at the specified location with the specified rotation.
---
---
---@param name string Particle effect name
---@param x number (float) X-Coordinate
---@param y number (float) Y-Coordinate
---@param z number (float) Z-Coordinate
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param flags number (positive integer) Effect scale (1.0f = standard)
---@return number (positive integer) Handle to particle effect instance
function StartPtfx(name, x, y, z, unknown_1, unknown_2, unknown_3, flags) end

---
---Starts and sticks a particle effect to a ped. (effect follows ped around)
---
---
---@param name string Particle effect name
---@param ped number (Ped) Ped id
---@param x number (float) X-offset
---@param y number (float) Y-offset
---@param z number (float) Z-offset
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param flags number (positive integer) Effect scale (1.0f = standard)
---@return number (positive integer) Handle to particle effect instance
function StartPtfxOnPed(name, ped, x, y, z, unknown_1, unknown_2, unknown_3, flags) end

---
---Starts and sticks a particle effect to a ped's bone. Returns a handle to the ptfx instance.
---
---
---@param name string Particle effect name
---@param ped number (Ped) Ped id
---@param x number (float) X-offset
---@param y number (float) Y-offset
---@param z number (float) Z-offset
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param pedbone number (integer)  Ped bone ID
---@param flags number (positive integer) Effect scale (1.0f = standard)
---@return number (positive integer) Handle to particle effect instance
function StartPtfxOnPedBone(name, ped, x, y, z, unknown_1, unknown_2, unknown_3, pedbone, flags) end

---
---Starts and sticks a particle effect to a vehicle. (effect follows vehicle around)
---Returns a handle to the ptfx instance
---
---
---@param name string Particle effect name
---@param veh number (Vehicle) Vehicle
---@param x number (float) X-offset
---@param y number (float) Y-offset
---@param z number (float) Z-offset
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@return number (positive integer) Handle to particle effect instance
function StartPtfxOnVeh(name, veh, x, y, z, unknown_1, unknown_2, unknown_3, unknown_4) end

---
---Starts and sticks a particle effect to an object. (effect follows object around)
---
---
---@param name string Particle effect name
---@param obj number (Object) Object id
---@param x number (float) X-offset
---@param y number (float) Y-offset
---@param z number (float) Z-offset
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param flags number (positive integer) Effect scale (1.0f = standard)
---@return number (positive integer) Handle to particle effect instance
function StartPtfxOnObj(name, obj, x, y, z, unknown_1, unknown_2, unknown_3, flags) end

---
---No description (
---
---
---@param name string
---@param obj number (Object)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param objbone number (integer)
---@param flags number (positive integer)
---@return number (positive integer)
function StartPtfxOnObjBone(name, obj, x, y, z, unknown_1, unknown_2, unknown_3, objbone, flags) end

---
---Stops the specified particle effect instance.
---
---
---@param ptfx number (positive integer) Particle Effect handle
---@return nil
function StopPtfx(ptfx) end

---
---Update PTFX offset. Works for all created PTFX.
---
---
---@param ptfx number (positive integer) Handler of PTFX
---@param x number (float) X-offset
---@param y number (float) Y-offset
---@param z number (float) Z-offset
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@return nil
function UpdatePtfxOffsets(ptfx, x, y, z, unknown_1, unknown_2, unknown_3) end

---
---No description (
---
---
---@param ptfx number (positive integer)
---@param r number (float)
---@param g number (float)
---@param b number (float)
---@param a number (float)
---@return nil
function UpdatePtfxTint(ptfx, r, g, b, a) end

---
---No description (
---
---
---@param ptfx number (positive integer)
---@param evolvetype string
---@param val number (float)
---@return nil
function EvolvePtfx(ptfx, evolvetype, val) end

---
---No description (
---
---
---@param ptfx number (positive integer)
---@return nil
function RemovePtfx(ptfx) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetPtfxCamInsideVehicle(set) end

---
---Removes any particle effects from the vehicle.
---
---
---@param veh number (Vehicle) Vehicle ID
---@return nil
function RemovePtfxFromVehicle(veh) end

---
---Removes any particle effects from the specified ped.
---
---
---@param ped number (Ped) Ped id
---@return nil
function RemovePtfxFromPed(ped) end

---
---No description (
---
---
---@param obj number (Object)
---@return nil
function RemovePtfxFromObject(obj) end

---
---No description (
---
---
---@param scale number (float)
---@return nil
function SetPedFireFxLodScaler(scale) end

---
---No description (
---
---
---@param name string
---@return nil
function SetTimecycleModifier(name) end

---
---No description (
---
---
---@param off boolean
---@return nil
function ForceNoiseOff(off) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@return nil
function RemoveProjtexInRange(x, y, z, radius) end

---
---No description (
---
---
---@param enable boolean
---@return nil
function EnableFovLodMultiplier(enable) end

---
---No description (
---
---
---@param texture number (positive integer)
---@param unknown_1 float
---@param unknown_2 float
---@param unknown_3 float
---@param unknown_4 float
---@param unknown_5 float
---@param unknown_6 float
---@param unknown_7 float
---@param unknown_8 float
---@param angle number (float)
---@param r number (integer)
---@param g number (integer)
---@param b number (integer)
---@param a number (integer)
---@return nil
function DrawSpriteWithUvCoords(texture, unknown_1, unknown_2, unknown_3, unknown_4, unknown_5, unknown_6, unknown_7, unknown_8, angle, r, g, b, a) end

---
---No description (
---
---
---@return nil
function StopStream() end

---
---No description (
---
---
---@param car number (Car)
---@param set boolean
---@return nil
function SetSirenWithNoDriver(car, set) end

---
---No description (
---
---
---@return nil
function FixScriptMicToCurrentPosisition() end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function ForceFullVoice(ped) end

---
---Plays the sound for the specified ringtone. To stop the sound played call STOP\_PREVIEW\_RINGTONE. It functions similarly to START\_CUSTOM\_MOBILE\_PHONE\_RINGING.
---
---
---@param RingtoneId number (integer) ringtone ID
---@return nil
function PreviewRingtone(RingtoneId) end

---
---This function returns the name of the current radio station in the player's vehicle.
---
---
---@return string radio station name
function GetPlayerRadioStationName() end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function SetScriptMicPosition(x, y, z) end

---
---No description (
---
---
---@param sound_id number (integer)
---@param name string
---@param obj number (Object)
---@return nil
function PlaySoundFromObject(sound_id, name, obj) end

---
---No description (
---
---
---@param sound_id number (integer)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function PlayFireSoundFromPosition(sound_id, x, y, z) end

---
---This function mutes almost all sounds in the game. Some "front end" sounds, like info beeps and cell phone beeps, car radios, cutscenes, and the TV aren't affected.
---
---
---@param mute boolean muted (0=off / 1=on)
---@return nil
function MuteGameworldAndPositionedRadioForTv(mute) end

---
---Adds a line to a scripted conversation.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param conversation number (positive integer) Unknown
---@param unknown_1 int
---@param unknown_2 int
---@return nil
function AddLineToScriptedConversation(conversation, unknown_1, unknown_2) end

---
---No description (
---
---
---@return nil
function StopMobilePhoneRinging() end

---
---No description (
---
---
---@param play boolean
---@return nil
function PlayScriptedConversationFrontend(play) end

---
---No description (
---
---
---@param name string
---@return boolean
function PreloadStream(name) end

---
---Stop the sound of the ringtone started with PREVIEW\_RINGTONE.
---
---
---@return nil
function StopPreviewRingtone() end

---
---No description (
---
---
---@return nil
function RemoveScriptMic() end

---
---This function starts the ringing of a cell phone. It will keep ringing until STOP\_MOBILE\_PHONE\_RINGING is used to stop it.
---
---
---@param RingtoneId number (integer) ringtone ID
---@return nil
function StartCustomMobilePhoneRinging(RingtoneId) end

---
---No description (
---
---
---@param mute boolean
---@return nil
function MutePositionedRadio(mute) end

---
---No description (
---
---
---@param ped number (Ped)
---@return boolean
function IsPainPlaying(ped) end

---
---No description (
---
---
---@return boolean
function GetPlayerHasTracks() end

---
---No description (
---
---
---@param pause boolean
---@return nil
function PauseScriptedConversation(pause) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetMobileRadioEnabledDuringGameplay(set) end

---
---No description (
---
---
---@param name string
---@param ped number (Ped)
---@return nil
function PlayAudioEventFromPed(name, ped) end

---
---No description (
---
---
---@return nil
function TriggerLoadingMusicOnNextFade() end

---
---No description (
---
---
---@param flag0 boolean
---@param flag1 boolean
---@return nil
function DontAbortCarConversations(flag0, flag1) end

---
---No description (
---
---
---@return nil
function EnableEndCreditsFade() end

---
---No description (
---
---
---@param id number (integer)
---@return nil
function UnlockMissionNewsStory(id) end

---
---No description (
---
---
---@return nil
function UnpauseRadio() end

---
---No description (
---
---
---@param StreamName string
---@param StartOffset number (integer)
---@return boolean
function PreloadStreamWithStartOffset(StreamName, StartOffset) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function SetScriptMicLookAt(x, y, z) end

---
---No description (
---
---
---@param id number (integer)
---@param ped number (Ped)
---@return nil
function CloseMicPed(id, ped) end

---
---This function retunes the radio in the player's vehicle to the station with given name. If the player is not in a vehicle already, the radio will be retuned the next time the player is in a vehicle.
---
---
---@param name string radio station name
---@return nil
function RetuneRadioToStationName(name) end

---
---No description (
---
---
---@param veh number (Vehicle)
---@param set boolean
---@return nil
function SetLoudVehicleRadio(veh, set) end

---
---No description (
---
---
---@param id number (integer)
---@return string
function GetRadioName(id) end

---
---No description (
---
---
---@return boolean
function IsScriptedConversationOngoing() end

---
---Adds a line to a mobile phone call.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param id number (integer) Unknown
---@param name string Unknown
---@param text string Unknown
---@return nil
function AddLineToMobilePhoneCall(id, name, text) end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function PlayStreamFromPed(ped) end

---
---No description (
---
---
---@param model number (positive integer)
---@param SoundName string
---@return nil
function SetMissionPickupSound(model, SoundName) end

---
---No description (
---
---
---@return string
function GetPlayerRadioStationNameRoll() end

---
---The results of this function are either unknown or untested.
---
---
---@param name string Unknown (missionï¿½?)
---@return boolean Unknown
function RequestMissionAudioBank(name) end

---
---No description (
---
---
---@param radiostation string
---@param trackname string
---@param unknown_1 int
---@param unknown_2 int
---@return nil
function ForceRadioTrack(radiostation, trackname, unknown_1, unknown_2) end

---
---No description (
---
---
---@param veh number (Vehicle)
---@param VoiceId number (integer)
---@return nil
function SetGpsVoiceForVehicle(veh, VoiceId) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetLobbyMuteOverride(set) end

---
---Adds a new frontend conversation speaker.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param unknown_1 int
---@param unknown_2 int
---@return nil
function AddNewFrontendConversationSpeaker(unknown_1, unknown_2) end

---
---No description (
---
---
---@param ped number (Ped)
---@param RingtoneId number (integer)
---@return nil
function SetPedMobileRingType(ped, RingtoneId) end

---
---No description (
---
---
---@param mood number (integer)
---@return nil
function SetBriansMood(mood) end

---
---Adds a new conversation speaker.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param id number (integer) Unknown
---@param unknown_1 int
---@return number (integer)  Unknown
function AddNewConversationSpeaker(id, unknown_1) end

---
---No description (
---
---
---@return boolean
function IsRadioHudOn() end

---
---Returns the current time of audio track, which is used in cutscene.
---
---
---@return number (integer) time
function GetCutsceneAudioTimeMs() end

---
---No description (
---
---
---@return nil
function StartMobilePhoneRinging() end

---
---No description (
---
---
---@param train number (Vehicle)
---@param rolloff number (float)
---@return nil
function SetTrainAudioRolloff(train, rolloff) end

---
---No description (
---
---
---@param state boolean
---@return nil
function SetMobilePhoneRadioState(state) end

---
---Adds a line to a conversation.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param unknown_1 ScriptAny
---@param unknown_2 ScriptAny
---@param unknown_3 ScriptAny
---@param unknown_4 ScriptAny
---@param unknown_5 ScriptAny
---@return nil
function AddLineToConversation(unknown_1, unknown_2, unknown_3, unknown_4, unknown_5) end

---
---No description (
---
---
---@return nil
function RetuneRadioUp() end

---
---No description (
---
---
---@param fix boolean
---@return nil
function FixAmbienceOrientation(fix) end

---
---Triggers a random police speech reporting a problem at the speccified location. No police arrives, as far as I can tell.
---
---
---@param id number (integer) Unknown (always 0?)
---@param x number (float) X pos
---@param y number (float) Y pos
---@param z number (float) Z pos
---@return nil
function TriggerVigilanteCrime(id, x, y, z) end

---
---No description (
---
---
---@param veh number (Vehicle)
---@return boolean
function CanBeDescribedAsACar(veh) end

---
---No description (
---
---
---@param abort boolean Conversation Id
---@return number (integer) Success of aborting the scripted conversation
function AbortScriptedConversation(abort) end

---
---No description (
---
---
---@return nil
function NewMobilePhoneCall() end

---
---No description (
---
---
---@return nil
function StartMobilePhoneCalling() end

---
---No description (
---
---
---@param mute boolean
---@return nil
function MuteGameworldAudio(mute) end

---
---No description (
---
---
---@param veh number (Vehicle) vehicle handle
---@param enable boolean enable
---@return nil
function EnableGpsInVehicle(veh, enable) end

---
---No description (
---
---
---@return nil
function SkipRadioForward() end

---
---No description (
---
---
---@return nil
function NewScriptedConversation() end

---
---This function will play a police report audio usually played after certain missions are completed or after certain events happened. The audio are located in SCRIPTED\_LINES.ivaud in the POLICE\_SCANNER.rpf file.
---Police report audio in Episodes from Liberty City are located in E#\_SCANNER\_SCRIPTED\_LINES.ivaud in the EP#\_SFX.rpf file.
---
---
---@param name string audio
---@return nil
function TriggerPoliceReport(name) end

---
---This function will play a mission complete audio usually heard when a mission is completed. The audio are located in the gps.rfp file. Valid values include 6-7, 10-11, 15, 18, 24-25, 27-28, 33-35, 42-43, 50-69, 71. Using other numbers will not play any audio. The audio will only play if a mission complete audio is not currently playing.
---
---
---@param id number (integer) values
---@return nil
function TriggerMissionCompleteAudio(id) end

---
---Sets if the GPS should be disabled or not. Untested
---
---
---@param disable boolean true/false
---@return nil
function DisableGps(disable) end

---
---This function disables the radio station Integrity 2.0. If the station is being played, the radio will be turned off. The station will not be accessible in the game, neither in a vehicle nor in the pause menu. The station can be enabled using UNLOCK\_LAZLOW\_STATION.
---
---
---@return nil
function LockLazlowStation() end

---
---No description (
---
---
---@param callfrom number (Ped)
---@param callfromvoice string
---@param callto number (Ped)
---@param calltovoice string
---@param flag0 boolean
---@param flag1 boolean
---@return nil
function StartMobilePhoneCall(callfrom, callfromvoice, callto, calltovoice, flag0, flag1) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param name string
---@return nil
function ReportCrime(x, y, z, name) end

---
---No description (
---
---
---@param id number (integer)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function ReportDispatch(id, x, y, z) end

---
---No description (
---
---
---@param veh number (Vehicle)
---@return nil
function ReportPoliceSpottingSuspect(veh) end

---
---No description (
---
---
---@return nil
function ReportSuspectArrested() end

---
---No description (
---
---
---@return nil
function ReportSuspectDown() end

---
---No description (
---
---
---@param flag0 boolean
---@param flag1 boolean
---@return nil
function StartScriptConversation(flag0, flag1) end

---
---Makes the ambient audio bank no longer needed.
---
---
---@return nil
function AmbientAudioBankNoLongerNeeded() end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function StopPedMobileRinging(ped) end

---
---No description (
---
---
---@return string ID string for use with emergency call speech.
function GetSpeechForEmergencyServiceCall() end

---
---No description (
---
---
---@return nil
function ReleaseScriptControlledMicrophone() end

---
---No description (
---
---
---@param ped number (Ped)
---@param VoiceId number (integer)
---@param IsMale boolean
---@return nil
function SetVoiceIdFromHeadComponent(ped, VoiceId, IsMale) end

---
---No description (
---
---
---@return number (integer)
function GetCurrentScriptedConversationLine() end

---
---No description (
---
---
---@param reg boolean
---@return nil
function RegisterScriptWithAudio(reg) end

---
---The results of this function are either unknown or untested.
---
---
---@param ped number (Ped) Ped Handle
---@param SpeechName string Speech
---@param VoiceName string Voice
---@param flag0 boolean Unknown
---@param flag1 boolean Unknown
---@param style number (integer) Unknown
---@return nil
function SayAmbientSpeechWithVoice(ped, SpeechName, VoiceName, flag0, flag1, style) end

---
---No description (
---
---
---@param TrackTextId number (integer)
---@return nil
function ReportTaggedRadioTrack(TrackTextId) end

---
---No description (
---
---
---@return number (integer)
---@return number (integer)
---@return number (integer)
function GetStreamBeatInfo() end

---
---No description (
---
---
---@param rolloff number (float)
---@param UnkTime number (integer)
---@return nil
function SetStreamParams(rolloff, UnkTime) end

---
---No description (
---
---
---@return number (integer)
function GetStreamPlaytime() end

---
---No description (
---
---
---@param heli number (Vehicle)
---@param skip boolean
---@return nil
function HeliAudioShouldSkipStartup(heli, skip) end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function RemoveCloseMicPed(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@return boolean
function IsAmbientSpeechDisabled(ped) end

---
---No description (
---
---
---@param ped number (Ped)
---@param AudioAnimEventName string
---@return nil
function HandleAudioAnimEvent(ped, AudioAnimEventName) end

---
---No description (
---
---
---@param obj number (Object)
---@return nil
function PlayStreamFromObject(obj) end

---
---No description (
---
---
---@param name string
---@return boolean
function RequestAmbientAudioBank(name) end

---
---No description (
---
---
---@param type number (integer)
---@return nil
function SetMobileRingType(type) end

---
---No description (
---
---
---@param EventName string
---@param obj number (Object)
---@return nil
function PlayAudioEventFromObject(EventName, obj) end

---
---No description (
---
---
---@param StoryId number (integer)
---@return nil
function UnlockGenericNewsStory(StoryId) end

---
---No description (
---
---
---@param SoundId number (integer)
---@param SoundName string
---@param ped number (Ped)
---@return nil
function PlaySoundFromPed(SoundId, SoundName, ped) end

---
---No description (
---
---
---@param SoundId number (integer)
---@param SoundName string
---@return nil
function PlaySound(SoundId, SoundName) end

---
---STOP\_END\_CREDITS\_MUSIC
---Function tested with the 2020 Patch of GTA IV.
---
---
---@return nil
function StopEndCreditsMusic() end

---
---START\_END\_CREDITS\_MUSIC
---Function tested with the 2020 Patch of GTA IV.
---
---
---@return nil
function StartEndCreditsMusic() end

---
---No description (
---
---
---@param SoundId number (integer)
---@param SoundName string
---@param veh number (Vehicle)
---@return nil
function PlaySoundFromVehicle(SoundId, SoundName, veh) end

---
---No description (
---
---
---@param radiostation string
---@return nil
function UnfreezeRadioStation(radiostation) end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function HighFallScream(ped) end

---
---No description (
---
---
---@return number (integer)
function GetAudibleMusicTrackTextId() end

---
---No description (
---
---
---@return nil
function RetuneRadioDown() end

---
---No description (
---
---
---@return boolean
function IsLazlowStationLocked() end

---
---No description (
---
---
---@param radiostate boolean
---@return nil
function SetTaxiGarageRadioState(radiostate) end

---
---No description (
---
---
---@param sound_id number (integer)
---@param name string
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function PlaySoundFromPosition(sound_id, name, x, y, z) end

---
---No description (
---
---
---@return number (integer)
function GetPlayerRadioMode() end

---
---This function sets the mood of Roman. Roman has four sets of audio that can be chosen with this function.
---Any higher values will use Roman's normal audio. This can be called at any time, even after Roman is spawned.
---
---
---@param moood number (integer) 0-3
---@return nil
function SetRomansMood(moood) end

---
---No description (
---
---
---@return nil
function DisableEndCreditsFade() end

---
---No description (
---
---
---@return nil
function PlayStreamFrontend() end

---
---No description (
---
---
---@param ped number (Ped)
---@param unk number (integer)
---@return nil
function StartPedMobileRinging(ped, unk) end

---
---No description (
---
---
---@return boolean
function EnableScriptControlledMicrophone() end

---
---No description (
---
---
---@param enable boolean enable
---@return nil
function EnableChaseAudio(enable) end

---
---The results of this function are either unknown or untested.
---
---
---@return nil
function MissionAudioBankNoLongerNeeded() end

---
---No description (
---
---
---@param ped number (Ped)
---@return nil
function OnFireScream(ped) end

---
---No description (
---
---
---@return nil
function RestartScriptedConversation() end

---
---No description (
---
---
---@param name string
---@param veh number (Vehicle)
---@return nil
function PlayAudioEventFromVehicle(name, veh) end

---
---No description (
---
---
---@param ped number (Ped)
---@return boolean
function IsAnySpeechPlaying(ped) end

---
---No description (
---
---
---@return nil
function SkipToNextScriptedConversationLine() end

---
---No description (
---
---
---@param StaticEmitterIndex number (integer)
---@return number (integer)
function GetStaticEmitterPlaytime(StaticEmitterIndex) end

---
---No description (
---
---
---@param StaticEmitterName string
---@return number (integer)
function FindStaticEmitterIndex(StaticEmitterName) end

---
---No description (
---
---
---@param StaticEmitterIndex number (integer)
---@param mute boolean
---@return nil
function MuteStaticEmitter(StaticEmitterIndex, mute) end

---
---No description (
---
---
---@return number (integer)
function GetAudioRoomId() end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return boolean
---@return number (float) height
function GetWaterHeightNoWaves(x, y, z) end

---
---No description (
---
---
---@return boolean
function SynchRecordingWithWater() end

---
---No description (
---
---
---@return boolean
function IsPlaceCarBombActive() end

---
---No description (
---
---
---@return boolean
function GetTaskPlaceCarBombUnsuccessful() end

---
---Allocates a script to an object, which will be activated when the player is within the specified area around it.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param ScriptName string Script Name
---@param model number (positive integer) Model Hash
---@param unk number (integer) priority (always 100)
---@param radius number (float) radius
---@param UnkTime number (integer) type (always -1)
---@return nil
function AllocateScriptToObject(ScriptName, model, unk, radius, UnkTime) end

---
---Returns whether the calling script's world point is within its desired range from the player. World point refers to a position defined in ambient*.ipl.
---The world points specify a position and the name of a script.
---The startup script calls REGISTER\_WORLD\_POINT\_SCRIPT\_BRAIN to register the world points to their scripts, which will allow the scripts to automatically start when the player gets close to the point.
---One example is the ambSaveBed script, which handles letting the player walk up to a bed and hit a key to save the game. Multiple world points are defined in ambient.ipl desiring this script as the points' "brain":
---When the game starts, the startup script calls REGISTER\_WORLD\_POINT\_SCRIPT\_BRAIN("AmbSaveBed", 50.0f); This makes the game start monitoring all the world points associated with the ambSaveBed script, and whenever the player is within 50.0 meters of one of those points, the game runs an instance of the ambSaveBed script and associates that instance to the world point. It will not execute a new instance for this world point until the existing one terminates. Scripts are not automatically terminated when the player leaves the range again.
---The executed script can now call IS\_WORLD\_POINT\_WITHIN\_BRAIN\_ACTIVATION\_RANGE which will tell it whether the player is still within range (50.0 meters), and terminate itself if not.
---When a script with a registered world point calls IS\_WORLD\_POINT\_WITHIN\_BRAIN\_ACTIVATION\_RANGE, the function retrieves the script's registered world point and checks whether the player is currently within the range specified in the call to REGISTER\_WORLD\_POINT\_SCRIPT\_BRAIN.
---
---
---@return boolean true, if within range; otherwise, false.
function IsWorldPointWithinBrainActivationRange() end

---
---No description (
---
---
---@param brain number (integer)
---@param switchstate boolean
---@return nil
function SwitchObjectBrains(brain, switchstate) end

---
---Allocates a script to a random ped activating when the player is within the specified area around it.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param ScriptName string Script Name
---@param model number (positive integer) Model Hash
---@param unk number (integer) priority (always 100)
---@param flag boolean Unknown
---@return nil
function AllocateScriptToRandomPed(ScriptName, model, unk, flag) end

---
---No description (
---
---
---@param ScriptName string
---@param radius number (float)
---@return nil
function RegisterWorldPointScriptBrain(ScriptName, radius) end

---
---No description (
---
---
---@param date0_0 number (integer)
---@param date0_1 number (integer)
---@param date1_0 number (integer)
---@param date1_1 number (integer)
---@return number (integer)
function CompareTwoDates(date0_0, date0_1, date1_0, date1_1) end

---
---No description (
---
---
---@param time number (integer)
---@return nil
function SetTimeOfNextAppointment(time) end

---
---No description (
---
---
---@return boolean
function HasCutsceneFinished() end

---
---Checks whether the missing cutscene.
---
---
---@return boolean status of the badge
function WasCutsceneSkipped() end

---
---No description (
---
---
---@return nil
function StartCutscene() end

---
---Use this native after initialization of cutscene (with INIT\_CUTSCENE)
---
---
---@return any
function StreamCutscene() end

---
---No description (
---
---
---@return boolean
function HasCutsceneLoaded() end

---
---The results of this function are either unknown or untested.
---
---
---@param name string Unknown (cutsceneï¿½?)
---@return nil
function ClearNamedCutscene(name) end

---
---No description (
---
---
---@param name string
---@return nil
function StartCutsceneNow(name) end

---
---No description (
---
---
---@return nil
function StopCutscene() end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function SetCutsceneExtraRoomPos(x, y, z) end

---
---No description (
---
---
---@return nil
function ClearCutscene() end

---
---No description (
---
---
---@param unkped number (integer)
---@return any (Vector3) pos
function GetCutscenePedPosition(unkped) end

---
---No description (
---
---
---@return number (integer)
function GetCutsceneSectionPlaying() end

---
---No description (
---
---
---@param ped number (Ped)
---@return boolean
function IsPedInCutsceneBlockingBounds(ped) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return boolean
function IsPosInCutsceneBlockingBounds(x, y, z) end

---
---Returns the total running time of the cutscene
---Code example:
---In this example of the code, time has 30 seconds.
---
---
---@return number (integer) time (in ms)
function GetCutsceneTime() end

---
---Load a cutscene with name P1 Name of all cutscenes you can find in Animviewer of OpenIV.
---
---
---@param name string Cutscene name
---@return nil
function InitCutscene(name) end

---
---No description (
---
---
---@param zone string
---@param poptype number (integer)
---@return nil
function SetZonePopulationType(zone, poptype) end

---
---No description (
---
---
---@return number (integer)
function GetCurrentPopulationZoneType() end

---
---No description (
---
---
---@param zone string
---@param scumminess number (integer)
---@return nil
function SetZoneScumminess(zone, scumminess) end

---
---No description (
---
---
---@return number (integer) scumminess
function GetCurrentZoneScumminess() end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return string
function GetNameOfZone(x, y, z) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return string
function GetNameOfInfoZone(x, y, z) end

---
---No description (
---
---
---@param name string
---@param set boolean
---@return nil
function SetZoneNoCops(name, set) end

---
---No description (
---
---
---@return nil
function ActivateScriptPopulationZone() end

---
---No description (
---
---
---@return nil
function DeactivateScriptPopulationZone() end

---
---No description (
---
---
---@param unknown_1 int
---@param unknown_2 int
---@param unknown_3 int
---@param unknown_4 int
---@param unknown_5 int
---@param unknown_6 int
---@return nil
function SpecifyScriptPopulationZoneArea(unknown_1, unknown_2, unknown_3, unknown_4, unknown_5, unknown_6) end

---
---No description (
---
---
---@param num number (integer)
---@return nil
function SpecifyScriptPopulationZoneNumPeds(num) end

---
---No description (
---
---
---@param num number (integer)
---@return nil
function SpecifyScriptPopulationZoneNumScenarioPeds(num) end

---
---No description (
---
---
---@param num number (integer)
---@return nil
function SpecifyScriptPopulationZoneNumCars(num) end

---
---No description (
---
---
---@param num number (integer)
---@return nil
function SpecifyScriptPopulationZoneNumParkedCars(num) end

---
---No description (
---
---
---@param percentage number (integer)
---@return nil
function SpecifyScriptPopulationZonePercentageCops(percentage) end

---
---No description (
---
---
---@param unknown_1 int
---@param unknown_2 int
---@param unknown_3 int
---@param unknown_4 int
---@param unknown_5 int
---@return nil
function SpecifyScriptPopulationZoneGroups(unknown_1, unknown_2, unknown_3, unknown_4, unknown_5) end

---
---No description (
---
---
---@return number (integer) groupparam0
---@return number (integer) groupparam1
function FindPrimaryPopulationZoneGroup() end

---
---This native function does nothing. GTA 4 has several native functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could be more than 0.
---
---
---@return any
function RemoveAllScriptFires() end

---
---This native function does nothing. GTA 4 has several native functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could be more than 0.
---
---
---@return any
function SetScriptFireAudio() end

---
---No description (
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return number (integer)
function GetNumberOfFiresInArea(x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param fire number (integer)
---@return number (float) x
---@return number (float) y
---@return number (float) z
function GetScriptFireCoords(fire) end

---
---No description (
---
---
---@param max number (integer)
---@return nil
function SetMaxFireGenerations(max) end

---
---No description (
---
---
---@param fire number (integer) fire handle
---@return boolean script fire exists
function DoesScriptFireExist(fire) end

---
---No description (
---
---
---@return any
function AddExplosionWithDirection() end

---
---No description (
---
---
---@param expnum number (integer)
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return boolean
function IsExplosionInArea(expnum, x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param expnum number (integer)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@return boolean
function IsExplosionInSphere(expnum, x, y, z, radius) end

---
---No description (
---
---
---@return any
function Void setCharWeaponSkill(ped ped, int skill);() end

---
---No description (
---
---
---@param weapon number (integer)
---@return number (integer) slot
function GetWeapontypeSlot(weapon) end

---
---No description (
---
---
---@param veh number (Vehicle)
---@param weapon number (integer)
---@return nil
function SelectWeaponsForVehicle(veh, weapon) end

---
---No description (
---
---
---@param weapontype number (integer)
---@return number (positive integer) model
function GetWeapontypeModel(weapontype) end

---
---No description (
---
---
---@param ped number (Ped)
---@param set boolean
---@return nil
function SetDeathWeaponsPersist(ped, set) end

---
---No description (
---
---
---@param obj number (Object)
---@return nil
function ClearObjectLastWeaponDamage(obj) end

---
---No description (
---
---
---@param ped number (Ped)
---@param hide boolean
---@return nil
function HideCharWeaponForScriptedCutscene(ped, hide) end

---
---No description (
---
---
---@param ped number (Ped)
---@param visble boolean
---@return nil
function SetCharCurrentWeaponVisible(ped, visble) end

---
---No description (
---
---
---@param obj number (Object)
---@param unk number (integer)
---@return boolean
function HasObjectBeenDamagedByWeapon(obj, unk) end

---
---Gives a weapon to the specified ped. It works similarly as GIVE\_WEAPON\_TO\_CHAR.Used in some .SCO missions.
---
---GIVE\_DELAYED\_WEAPON\_TO\_CHAR(GET\_PLAYER\_CHAR( CONVERT\_INT\_TO\_PLAYERINDEX( GET\_PLAYER\_ID() )), 7, 500, 1);
---This native gives you baretta with 500 bullets.
---
---
---@param ped number (Ped) char handle
---@param weapon number (integer) weaponid
---@param delaytime number (integer) ammo
---@param flag boolean 0 - hidden / 1 - naked
---@return nil
function GiveDelayedWeaponToChar(ped, weapon, delaytime, flag) end

---
---No description (
---
---
---@param obj number (Object)
---@return boolean
function GetIsStickyBombStuckToObject(obj) end

---
---No description (
---
---
---@param veh number (Vehicle)
---@return boolean
function GetIsStickyBombStuckToVehicle(veh) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (integer)
function GetNumberOfStickyBombsStuckToObject(obj) end

---
---No description (
---
---
---@param veh number (Vehicle)
---@return number (integer)
function GetNumberOfStickyBombsStuckToVehicle(veh) end

---
---No description (
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@param type number (integer)
---@return boolean
function GetIsProjectileTypeInArea(x0, y0, z0, x1, y1, z1, type) end

---
---No description (
---
---
---@param ped number (Ped)
---@param disable boolean
---@return nil
function DisableStickyBombActiveSound(ped, disable) end

---
---No description (
---
---
---@param ped number (Ped)
---@param min number (float)
---@param max number (float)
---@return nil
function SetMinMaxPedAccuracy(ped, min, max) end

---
---No description (
---
---
---@param ped number (Ped)
---@return number (integer)
function GetNumberOfActiveStickyBombsOwnedByPed(ped) end

---
---No description (
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return nil
function SwitchRoadsOn(x0, y0, z0, x1, y1, z1) end

---
---This function prevents civilian-driven vehicles, including cars and boats, to spawn within the zone. Vehicles spawned outside the area will not travel into the area. Police cars don't spawn in the zone unless the player has a wanted level. Parked vehicles still spawn and mission vehicles still travel into the zone. This function can be undone using SWITCH\_ROADS\_BACK\_TO\_ORIGINAL with the same coordinates used for this function.
---
---
---@param x0 number (float) minimum x-coordinate
---@param y0 number (float) minimum y-coordinate
---@param z0 number (float) minimum z-coordinate
---@param x1 number (float) maximum x-coordinate
---@param y1 number (float) maximum y-coordinate
---@param z1 number (float) maximum z-coordinate
---@return nil
function SwitchRoadsOff(x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return nil
function SwitchPedPathsOn(x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return nil
function SwitchPedPathsOff(x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@return nil
function DefinePedGenerationConstraintArea(x, y, z, radius) end

---
---No description (
---
---
---@return nil
function DestroyPedGenerationConstraintArea() end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param n number (integer)
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
function GetNthClosestCarNode(x, y, z, n) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
function GetNextClosestCarNode(x, y, z) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
---@return number (float) heading
function GetNextClosestCarNodeWithHeading(x, y, z) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
---@return number (float) heading
function GetNextClosestCarNodeWithHeadingOnIsland(x, y, z) end

---
---No description (
---
---
---@param unknown_1 int
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
---@return number (float) heading
function GetClosestCarNodeFavourDirection(unknown_1, x, y, z) end

---
---No description (
---
---
---@param unknown_1 int
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param n number (integer)
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
---@return number (float) direction
function GetNthClosestCarNodeFavourDirection(unknown_1, x, y, z, n) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
---@return number (float) direction
function GetNextClosestCarNodeFavourDirection(x, y, z) end

---
---This native function does nothing. GTA 4 has several native functions that act like this. You could find what they are by using this link. Note that for some functions number of parameters could be more than 0.
---
---
---@return any
function GetClosestStraightRoad() end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param unknown_1 float
---@param unknown_2 int
---@return boolean
---@return any (Vector3)
---@return any (Vector3)
---@return number (float)
---@return number (float)
---@return number (float)
function GetClosestRoad(x, y, z, unknown_1, unknown_2) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@return nil
function LoadPathNodesInArea(x, y, z, radius) end

---
---No description (
---
---
---@return nil
function ReleasePathNodes() end

---
---No description (
---
---
---@return any
function GetParkingNodeInArea() end

---
---No description (
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return nil
function SwitchRoadsBackToOriginal(x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return nil
function SwitchPedRoadsBackToOriginal(x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function MarkRoadNodeAsDontWander(x, y, z) end

---
---No description (
---
---
---@return nil
function UnmarkAllRoadNodesAsDontWander() end

---
---No description (
---
---
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@return number (float)
function CalculateTravelDistanceBetweenNodes(x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@param flag0 boolean
---@param flag1 boolean
---@param flag2 boolean
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
---@return number (float) heading
function GetRandomCarNode(x, y, z, radius, flag0, flag1, flag2) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@param flag0 boolean
---@param flag1 boolean
---@param flag2 boolean
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
---@return number (float) heading
function GetRandomCarNodeIncludeSwitchedOffNodes(x, y, z, radius, flag0, flag1, flag2) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param radius number (float)
---@param flag0 boolean
---@param flag1 boolean
---@param flag2 boolean
---@param flag3 boolean
---@return boolean
---@return number (float) pX
---@return number (float) pY
---@return number (float) pZ
---@return number (float) heading
function GetRandomWaterNode(x, y, z, radius, flag0, flag1, flag2, flag3) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param flag0 boolean
---@param flag1 boolean
---@param node any (Vector3*)
---@return boolean
---@return number (float) heading
function GetNthClosestWaterNodeWithHeading(x, y, z, flag0, flag1, node) end

---
---Adds a navmesh to a required region.
---
---
---@param x number (float) X Coordinate
---@param y number (float) Y Coordinate
---@param z number (float) Z Coordinate
---@return number (integer) True on success and false on failure
function AddNavmeshRequiredRegion(x, y, z) end

---
---No description (
---
---
---@param unknown_1 float
---@param unknown_2 float
---@return boolean
function RemoveNavmeshRequiredRegion(unknown_1, unknown_2) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return number (integer) direction
---@return any (Vector3)
function GenerateDirections(x, y, z) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetIgnoreNoGpsFlag(set) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetDitchPoliceModels(set) end

---
---No description (
---
---
---@return nil
function SimulateUpdateLoadScene() end

---
---No description (
---
---
---@param model number (positive integer)
---@return boolean
function HasCollisionForModelLoaded(model) end

---
---No description (
---
---
---@param time number (integer)
---@return nil
function SetStreamingRequestListTime(time) end

---
---No description (
---
---
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@return nil
function StartLoadScene(x, y, z) end

---
---Adds a position that the player is needed at (used a lot on dating).
---
---
---@param x number (float) X Coordinate
---@param y number (float) Y Coordinate
---@param z number (float) Z Coordinate
---@return nil
function AddNeededAtPosn(x, y, z) end

---
---No description (
---
---
---@param name string
---@return nil
function StartStreamingRequestList(name) end

---
---No description (
---
---
---@return nil
function FinishStreamingRequestList() end

---
---No description (
---
---
---@param index number (integer)
---@return number (positive integer)
function GetVehicleModelFromIndex(index) end

---
---Attaches animations to a model.
---
---
---@param model number (positive integer) The Model Id
---@param anims string The Animation Id
---@return nil
function AttachAnimsToModel(model, anims) end

---
---No description (
---
---
---@param on boolean
---@return nil
function SwitchStreaming(on) end

---
---No description (
---
---
---@param model number (positive integer)
---@return nil
function RequestCollisionForModel(model) end

---
---No description (
---
---
---@param iplname string
---@return nil
function RemoveIplDiscreetly(iplname) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetReduceVehicleModelBudget(set) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetReducePedModelBudget(set) end

---
---No description (
---
---
---@return boolean
function IsStreamingPriorityRequests() end

---
---No description (
---
---
---@param index number (integer)
---@return number (positive integer)
function GetPedModelFromIndex(index) end

---
---No description (
---
---
---@param model number (positive integer) model/hash
---@return boolean true / false
function IsModelInCdimage(model) end

---
---No description (
---
---
---@param interior number (integer)
---@param roomhash number (positive integer)
---@return nil
function LoadSceneForRoomByKey(interior, roomhash) end

---
---No description (
---
---
---@return boolean
function UpdateLoadScene() end

---
---No description (
---
---
---@return nil
function PrioritizeStreamingRequest() end

---
---No description (
---
---
---@return nil
function RequestAllSlodsInWorld() end

---
---No description (
---
---
---@param stat number (integer)
---@param set boolean
---@return nil
function SetStatFrontendVisibility(stat, set) end

---
---No description (
---
---
---@return number (float)
function GetProgressPercentage() end

---
---No description (
---
---
---@param unknown_1 int
---@param unknown_2 float
---@return nil
function PlaystatsFloat(unknown_1, unknown_2) end

---
---Awards the player some mission respect statistics
---
---
---@param respect number (float) The Amount of Respect to give to the Player
---@return nil
function AwardPlayerMissionRespect(respect) end

---
---No description (
---
---
---@param  string
---@return nil
function RegisterMissionPassed() end

---
---No description (
---
---
---@param  string
---@return nil
function PlaystatsMissionPassed() end

---
---No description (
---
---
---@param unknown_1 int
---@param position number (integer)
---@return nil
function RegisterBestPosition(unknown_1, position) end

---
---No description (
---
---
---@param unknown_1 ScriptAny
---@param unknown_2 int
---@param unknown_3 float
---@return nil
function PlaystatsIntFloat(unknown_1, unknown_2, unknown_3) end

---
---No description (
---
---
---@param number number (integer)
---@return nil
function RegisterTrackNumber(number) end

---
---No description (
---
---
---@param stat number (integer)
---@return number (integer)
function GetStatFrontendDisplayType(stat) end

---
---No description (
---
---
---@param metres number (integer)
---@return number (integer)
function ConvertMetresToFeetInt(metres) end

---
---No description (
---
---
---@param stat number (integer)
---@return nil
function SetStatFrontendVisibleAfterIncremented(stat) end

---
---No description (
---
---
---@param stat number (integer)
---@return nil
function SetStatFrontendNeverVisible(stat) end

---
---No description (
---
---
---@return number (integer)
function FindMaxNumberOfGroupMembers() end

---
---No description (
---
---
---@param stat number (integer)
---@return boolean
function CanTheStatHaveString(stat) end

---
---No description (
---
---
---@param unknown_1 ScriptAny
---@param unknown_2 int
---@return nil
function PlaystatsInt(unknown_1, unknown_2) end

---
---No description (
---
---
---@param stat number (integer)
---@param val number (float)
---@return nil
function IncrementFloatStat(stat, val) end

---
---No description (
---
---
---@param stat number (integer)
---@return nil
function PlaystatsCheat(stat) end

---
---No description (
---
---
---@param stat number (integer)
---@param val number (float)
---@return nil
function RegisterFloatStat(stat, val) end

---
---No description (
---
---
---@param stat number (integer)
---@param val number (integer)
---@return nil
function RegisterIntStat(stat, val) end

---
---No description (
---
---
---@return nil
function RegisterOddjobMissionPassed() end

---
---No description (
---
---
---@param stat number (integer)
---@return boolean
function GetStatFrontendVisibility(stat) end

---
---No description (
---
---
---@param stat number (integer)
---@param val number (float)
---@return nil
function DecrementFloatStat(stat, val) end

---
---No description (
---
---
---@param stat number (integer)
---@param type number (integer)
---@return nil
function SetStatFrontendDisplayType(stat, type) end

---
---No description (
---
---
---@param metres number (float)
---@return number (float)
function ConvertMetresToFeet(metres) end

---
---No description (
---
---
---@param show boolean
---@return nil
function ShowUpdateStats(show) end

---
---No description (
---
---
---@param unknown_1 int
---@return nil
function PlaystatsMissionStarted(unknown_1) end

---
---No description (
---
---
---@param respect number (float)
---@return nil
function SetMissionRespectTotal(respect) end

---
---No description (
---
---
---@param floatstatval number (float)
---@return nil
function SetTotalNumberOfMissions(floatstatval) end

---
---No description (
---
---
---@param unknown_1 ScriptAny
---@param unknown_2 int
---@param unknown_3 int
---@return nil
function PlaystatsIntInt(unknown_1, unknown_2, unknown_3) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetPlayerIsInStadium(set) end

---
---No description (
---
---
---@param unknown_1 int
---@return nil
function PlaystatsMissionFailed(unknown_1) end

---
---No description (
---
---
---@return number (integer)
function GetTotalNumberOfStats() end

---
---No description (
---
---
---@param unknown_1 int
---@return nil
function PlaystatsMissionCancelled(unknown_1) end

---
---No description (
---
---
---@param number number (integer)
---@return nil
function RegisterTrackNumber(number) end

---
---No description (
---
---
---@param stat number (integer)
---@param str string
---@return nil
function RegisterStringForFrontendStat(stat, str) end

---
---No description (
---
---
---@param set boolean
---@return nil
function SetStatFrontendAlwaysVisible(set) end

---
---No description (
---
---
---@param name string
---@return boolean
function DoesScriptExist(name) end

---
---No description (
---
---
---@param ScriptHandle number (integer)
---@return nil
function DestroyThread(ScriptHandle) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (float) turnmass
function GetObjectTurnMass(obj) end

---
---No description (
---
---
---@param obj number (Object)
---@return number (float) mass
function GetObjectMass(obj) end

---
---No description (
---
---
---@param door number (Object)
---@param flag boolean
---@param unknown_1 float
---@return nil
function SetDoorState(door, flag, unknown_1) end

---
---No description (
---
---
---@param obj number (Object)
---@param x number (float)
---@param y number (float)
---@param z number (float)
---@param xr number (float)
---@param yr number (float)
---@param zr number (float)
---@param flag boolean
---@return boolean
function LocateObject3d(obj, x, y, z, xr, yr, zr, flag) end

---
---No description (
---
---
---@param attribute number (integer)
---@return number (Object) obj
function GrabNearbyObjectWithSpecialAttribute(attribute) end

---
---No description (
---
---
---@param obj number (Object)
---@param animname0 string
---@param animname1 string
---@param time number (float)
---@return nil
function SetObjectAnimCurrentTime(obj, animname0, animname1, time) end

---
---Attaches 2 Objects together.
---This section is incomplete. You can help by fixing and expanding it.
---
---
---@param obj0 number (Object) Object Id 1
---@param obj1_attach_to number (Object) Object Id 2
---@param unknown_1 int
---@param x0 number (float) X Offset
---@param y0 number (float) Y Offset
---@param z0 number (float) Z Offset
---@param x1 number (float) X Rotation
---@param y1 number (float) Y Rotation
---@param z1 number (float) Z Rotation
---@return nil
function AttachObjectToObject(obj0, obj1_attach_to, unknown_1, x0, y0, z0, x1, y1, z1) end

---
---No description (
---
---
---@param obj number (Object)
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@param flag boolean
---@return boolean
function IsObjectInArea3d(obj, x0, y0, z0, x1, y1, z1, flag) end

---
---No description (
---
---
---@param obj number (Object)
---@param set boolean
---@return nil
function SetObjectCcd(obj, set) end

---
---No description (
---
---
---@param obj number (Object)
---@param x0 number (float)
---@param y0 number (float)
---@param z0 number (float)
---@param x1 number (float)
---@param y1 number (float)
---@param z1 number (float)
---@param unknown_1 float
---@param flag boolean
---@return boolean
function IsObjectInAngledArea3d(obj, x0, y0, z0, x1, y1, z1, unknown_1, flag) end
